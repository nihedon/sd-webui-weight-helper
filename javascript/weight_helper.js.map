{
  "version": 3,
  "sources": ["../src/shared/types/lora-types.ts", "../src/shared/constants/common-const.ts", "../src/shared/manager/config-manager.ts", "../src/shared/manager/history-manager.ts", "../src/shared/utils/common-utils.ts", "../src/shared/manager/cache-manager.ts", "../src/shared/state/current-state.ts", "../src/shared/utils/helper-utils.ts", "../src/shared/utils/editor-utils.ts", "../src/shared/state/global-weight-helper-state.ts", "../src/shared/utils/state-utils.ts", "../src/shared/manager/api-manager.ts", "../src/shared/utils/api-utils.ts", "../src/shared/utils/weight-utils.ts", "../node_modules/lit-html/src/lit-html.ts", "../src/components/sections/common-section.ts", "../src/components/sections/header-section.ts", "../src/components/sections/lbw-section.ts", "../src/components/sections/lora-settings-section.ts", "../src/components/sections/metadata-section.ts", "../src/components/sections/preview-section.ts", "../src/components/ui-template.ts", "../src/index.ts"],
  "sourcesContent": ["export const NamespaceTypes = {\n    lora: 'lora',\n    lyco: 'lyco',\n} as const;\nexport type NamespaceTypes = (typeof NamespaceTypes)[keyof typeof NamespaceTypes];\n\nexport const LoraBlockTypes = {\n    lora: 'lora',\n    lycoris: 'lycoris',\n    Unknown: 'Unknown',\n} as const;\nexport type LoraBlockTypes = (typeof LoraBlockTypes)[keyof typeof LoraBlockTypes];\n\nexport const ModelTypes = {\n    SD: 'SD',\n    SDXL: 'SDXL',\n    Flux: 'Flux',\n    Unknown: 'Unknown',\n} as const;\nexport type ModelTypes = (typeof ModelTypes)[keyof typeof ModelTypes];\n\nexport const LoraDefineParams = {\n    te: 'te',\n    unet: 'unet',\n    start: 'start',\n    stop: 'stop',\n    step: 'step',\n    lbw: 'lbw',\n    lbwe: 'lbwe',\n} as const;\nexport type LoraDefineParams = (typeof LoraDefineParams)[keyof typeof LoraDefineParams];\n\nexport const WeightControllerTypes = {\n    TENC: 'TEnc',\n    UNET: 'UNet',\n    START: 'Start',\n    STOP: 'Stop',\n    LBW: 'LBW',\n} as const;\nexport type WeightControllerTypes = (typeof WeightControllerTypes)[keyof typeof WeightControllerTypes];\n", "import { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\n\nconst BASE_MODEL_TYPE = {\n    STABLE_DIFFUSION: [\n        'BASE',\n        'IN00',\n        'IN01',\n        'IN02',\n        'IN03',\n        'IN04',\n        'IN05',\n        'IN06',\n        'IN07',\n        'IN08',\n        'IN09',\n        'IN10',\n        'IN11',\n        'M00',\n        'OUT00',\n        'OUT01',\n        'OUT02',\n        'OUT03',\n        'OUT04',\n        'OUT05',\n        'OUT06',\n        'OUT07',\n        'OUT08',\n        'OUT09',\n        'OUT10',\n        'OUT11',\n    ],\n    BLACK_FOREST_LABS: [\n        'CLIP',\n        'T5',\n        'IN',\n        'D00',\n        'D01',\n        'D02',\n        'D03',\n        'D04',\n        'D05',\n        'D06',\n        'D07',\n        'D08',\n        'D09',\n        'D10',\n        'D11',\n        'D12',\n        'D13',\n        'D14',\n        'D15',\n        'D16',\n        'D17',\n        'D18',\n        'S00',\n        'S01',\n        'S02',\n        'S03',\n        'S04',\n        'S05',\n        'S06',\n        'S07',\n        'S08',\n        'S09',\n        'S10',\n        'S11',\n        'S12',\n        'S13',\n        'S14',\n        'S15',\n        'S16',\n        'S17',\n        'S18',\n        'S19',\n        'S20',\n        'S21',\n        'S22',\n        'S23',\n        'S24',\n        'S25',\n        'S26',\n        'S27',\n        'S28',\n        'S29',\n        'S30',\n        'S31',\n        'S32',\n        'S33',\n        'S34',\n        'S35',\n        'S36',\n        'S37',\n        'OUT',\n    ],\n};\n\nexport const LBW_BLOCKS = {\n    [ModelTypes.SD]: BASE_MODEL_TYPE.STABLE_DIFFUSION,\n    [ModelTypes.SDXL]: BASE_MODEL_TYPE.STABLE_DIFFUSION,\n    [ModelTypes.Flux]: BASE_MODEL_TYPE.BLACK_FOREST_LABS,\n    [ModelTypes.Unknown]: [],\n};\n\nexport const lbwMaskDefine = {\n    [ModelTypes.SD]: {\n        [LoraBlockTypes.lora]: [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [LoraBlockTypes.lycoris]: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [LoraBlockTypes.Unknown]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n    [ModelTypes.SDXL]: {\n        [LoraBlockTypes.lora]: [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [LoraBlockTypes.lycoris]: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [LoraBlockTypes.Unknown]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n    [ModelTypes.Flux]: {\n        [LoraBlockTypes.lora]: [\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        ],\n        [LoraBlockTypes.lycoris]: [\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        ],\n        [LoraBlockTypes.Unknown]: [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ],\n    },\n    [ModelTypes.Unknown]: {\n        [LoraBlockTypes.lora]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [LoraBlockTypes.lycoris]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [LoraBlockTypes.Unknown]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n};\n\nexport const XYZ_PRESETS = {\n    [ModelTypes.SD]: {\n        [LoraBlockTypes.lora]: 'XYZ(17)',\n        [LoraBlockTypes.lycoris]: 'XYZ(26)',\n        [LoraBlockTypes.Unknown]: 'XYZ(26)',\n    },\n    [ModelTypes.SDXL]: {\n        [LoraBlockTypes.lora]: 'XYZ(12)',\n        [LoraBlockTypes.lycoris]: 'XYZ(20)',\n        [LoraBlockTypes.Unknown]: 'XYZ(26)',\n    },\n    [ModelTypes.Flux]: {\n        [LoraBlockTypes.lora]: 'XYZ(19)',\n        [LoraBlockTypes.lycoris]: 'XYZ(19)',\n        [LoraBlockTypes.Unknown]: 'XYZ(19)',\n    },\n    [ModelTypes.Unknown]: {\n        [LoraBlockTypes.lora]: 'XYZ(17)',\n        [LoraBlockTypes.lycoris]: 'XYZ(26)',\n        [LoraBlockTypes.Unknown]: 'XYZ(26)',\n    },\n};\n\nexport const SELECTABLE_MODEL_TYPES = {\n    '': ModelTypes.Unknown,\n    SD: ModelTypes.SD,\n    SDXL: ModelTypes.SDXL,\n    Flux: ModelTypes.Flux,\n};\n\nexport const SELECTABLE_LORA_BLOCK_TYPES = {\n    '': LoraBlockTypes.Unknown,\n    'LoRA(LierLa)': LoraBlockTypes.lora,\n    'LyCORIS,etc': LoraBlockTypes.lycoris,\n};\n\nexport const CARD_NO_IMAGE_PATH = './file=html/card-no-preview.png';\n", "import {\n    LBW_BLOCKS,\n    lbwMaskDefine as LBW_MASK_DEFINE,\n    SELECTABLE_LORA_BLOCK_TYPES,\n    SELECTABLE_MODEL_TYPES,\n    XYZ_PRESETS,\n} from '@/shared/constants/common-const';\nimport { LoraBlockTypes, ModelTypes, WeightControllerTypes } from '@/shared/types/lora-types';\n\ninterface WeightControllerInterface {\n    min: number;\n    max: number;\n    default: number;\n    step: number;\n}\n\nconst WeightControllerConfig: Record<string, WeightControllerInterface> = {\n    [WeightControllerTypes.TENC]: {\n        min: 0,\n        max: 0,\n        default: 1,\n        step: 0.5,\n    },\n    [WeightControllerTypes.UNET]: {\n        min: 0,\n        max: 0,\n        default: 0,\n        step: 0.5,\n    },\n    [WeightControllerTypes.START]: {\n        min: 0,\n        max: 0,\n        default: 0,\n        step: 1,\n    },\n    [WeightControllerTypes.STOP]: {\n        min: 0,\n        max: 0,\n        default: 0,\n        step: 1,\n    },\n    [WeightControllerTypes.LBW]: {\n        min: 0,\n        max: 0,\n        default: 1,\n        step: 0.5,\n    },\n};\n\nconst lbwGroupConfig = {\n    [ModelTypes.SD]: {\n        [LoraBlockTypes.lora]: [['BASE', 'IN01-IN04', 'IN05-IN08', 'M00', 'OUT03-OUT06', 'OUT07-OUT11']],\n        [LoraBlockTypes.lycoris]: [['BASE', 'IN00-IN05', 'IN06-IN11', 'M00', 'OUT00-OUT05', 'OUT06-OUT11']],\n        [LoraBlockTypes.Unknown]: [[]] as string[][],\n    },\n    [ModelTypes.SDXL]: {\n        [LoraBlockTypes.lora]: [['BASE', 'IN04-IN08', 'M00', 'OUT00-OUT05']],\n        [LoraBlockTypes.lycoris]: [['BASE', 'IN00-IN03', 'IN04-IN08', 'M00', 'OUT00-OUT03', 'OUT04-OUT08']],\n        [LoraBlockTypes.Unknown]: [[]] as string[][],\n    },\n    [ModelTypes.Flux]: {\n        [LoraBlockTypes.lora]: [['CLIP', 'T5', 'IN', 'OUT'], ['D00-D18'], ['S00-S18'], ['S19-S37']],\n        [LoraBlockTypes.lycoris]: [['CLIP', 'T5', 'IN', 'OUT'], ['D00-D18'], ['S00-S18'], ['S19-S37']],\n        [LoraBlockTypes.Unknown]: [[]] as string[][],\n    },\n    [ModelTypes.Unknown]: {\n        [LoraBlockTypes.lora]: [[]] as string[][],\n        [LoraBlockTypes.lycoris]: [[]] as string[][],\n        [LoraBlockTypes.Unknown]: [[]] as string[][],\n    },\n};\n\n/**\n * Initializes the configuration for block groups and weight controllers.\n * Updates configuration values with settings from opts.\n */\nexport function initialize() {\n    const optBlockPattern = /((BASE|MID|M00|CLIP|T5|(IN|OUT|D|S)[0-9]{2}(-(IN|OUT|D|S)[0-9]{2})?) *(, *|$))+/;\n    for (const modelType of Object.values(SELECTABLE_MODEL_TYPES)) {\n        if (modelType === ModelTypes.Unknown || modelType === ModelTypes.Flux) continue;\n        for (const loraBlockType of Object.values(SELECTABLE_LORA_BLOCK_TYPES)) {\n            if (loraBlockType === LoraBlockTypes.Unknown) continue;\n            try {\n                let optBlockPoints = opts[`weight_helper_LBW_${modelType}_${loraBlockType}_block_points`] as string;\n                optBlockPoints = optBlockPoints.replace('MID', 'M00');\n                if (optBlockPattern.exec(optBlockPoints)) {\n                    const blockPoints = optBlockPoints.split(',').map((v) => {\n                        return v.trim().replace(/\\d+/g, (match) => (match.length === 1 ? `0${match}` : match));\n                    });\n                    lbwGroupConfig[modelType][loraBlockType] = [blockPoints];\n                }\n            } catch (e) {\n                console.warn(`${modelType}_${loraBlockType} block definition format is invalid.`, e);\n            }\n        }\n    }\n\n    for (const k of [WeightControllerTypes.TENC, WeightControllerTypes.UNET, WeightControllerTypes.LBW]) {\n        WeightControllerConfig[k].min = +opts[`weight_helper_${k}_min`];\n        WeightControllerConfig[k].max = +opts[`weight_helper_${k}_max`];\n        WeightControllerConfig[k].step = +opts[`weight_helper_${k}_step`];\n    }\n}\n\n/**\n * Retrieves the configuration for a specific weight controller type.\n * @param type - The weight controller type.\n * @returns The configuration object for the specified controller type.\n */\nexport function getWeightControllerConfig(type: string): WeightControllerInterface {\n    return WeightControllerConfig[type];\n}\n\n/**\n * Returns the list of LBW blocks for the selected model type.\n * @param selectedModelType - The selected model type.\n * @returns An array of block labels for the given model type.\n */\nexport function getLbwBlocks(selectedModelType: ModelTypes): string[] {\n    if (selectedModelType in LBW_BLOCKS) {\n        return LBW_BLOCKS[selectedModelType];\n    }\n    return LBW_BLOCKS[ModelTypes.Unknown];\n}\n\n/**\n * Returns an array of enabled LBW block labels for the selected model and LoRA block type.\n * Only blocks with a mask value of 1 are included.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @returns An array of enabled block labels.\n */\nexport function getMaskedLbwBlocks(selectedModelType: ModelTypes, selectedLoraBlockType: LoraBlockTypes): string[] {\n    const masks = getLbwMasks(selectedModelType, selectedLoraBlockType);\n    return LBW_BLOCKS[selectedModelType || ModelTypes.Unknown].filter((_, i) => masks[i] === 1);\n}\n\n/**\n * Returns the mask array for LBW blocks for the selected model and block type.\n * Each value in the array (1 or 0) indicates whether the corresponding block is enabled.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @returns An array of binary values (1=enabled, 0=disabled).\n */\nexport function getLbwMasks(selectedModelType: ModelTypes, selectedLoraBlockType: LoraBlockTypes): number[] {\n    return LBW_MASK_DEFINE[selectedModelType || ModelTypes.Unknown][selectedLoraBlockType || LoraBlockTypes.Unknown];\n}\n\n/**\n * Returns the block groups configuration for the selected model and block type.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @returns An array of block group identifiers.\n */\nexport function getLbwBlockGroups(selectedModelType: ModelTypes, selectedLoraBlockType: LoraBlockTypes): string[][] {\n    return lbwGroupConfig[selectedModelType || ModelTypes.Unknown][selectedLoraBlockType || LoraBlockTypes.Unknown];\n}\n\n/**\n * Returns the XYZ label for the selected model and block type.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @returns The XYZ identifier string.\n */\nexport function getXyzLabel(selectedModelType: ModelTypes, selectedLoraBlockType: LoraBlockTypes): string {\n    return XYZ_PRESETS[selectedModelType || ModelTypes.Unknown][selectedLoraBlockType || LoraBlockTypes.Unknown];\n}\n", "import { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\n\nlet _historiesStore: Record<string, { loraParams: string; selectedLoraBlockType: LoraBlockTypes; selectedModelType: ModelTypes }[]> = {};\nconst _lockStore: Record<string, Set<string>> = {};\n\n/**\n * Retrieves the history list for the given LoRA name.\n * @param loraName - The name of the LoRA model.\n * @returns An array of history objects for the LoRA.\n */\nexport function getHistories(loraName: string): { loraParams: string; selectedLoraBlockType: LoraBlockTypes; selectedModelType: ModelTypes }[] {\n    return _historiesStore[loraName] ?? [];\n}\n\n/**\n * Adds a new history entry for the given LoRA name.\n * If a history with the same loraParams exists, it is replaced.\n * @param loraName - The name of the LoRA model.\n * @param history - The history object to add.\n */\nexport function addHistory(loraName: string, history: { loraParams: string; selectedLoraBlockType: LoraBlockTypes; selectedModelType: ModelTypes }) {\n    history = {\n        loraParams: history.loraParams,\n        selectedLoraBlockType: history.selectedLoraBlockType,\n        selectedModelType: history.selectedModelType,\n    };\n    if (loraName in _historiesStore) {\n        _historiesStore[loraName] = _historiesStore[loraName].filter((h) => h.loraParams !== history.loraParams);\n        _historiesStore[loraName].push(history);\n    } else {\n        _historiesStore[loraName] = [history];\n    }\n}\n\n/**\n * Clears all unlocked history entries for the given LoRA name.\n * Only locked histories are retained.\n * @param loraName - The name of the LoRA model.\n */\nexport function clearHistories(loraName: string) {\n    if (loraName in _historiesStore) {\n        const lockSet = _lockStore[loraName];\n        _historiesStore[loraName] = _historiesStore[loraName].filter((h) => lockSet && lockSet.has(h.loraParams));\n    }\n}\n\n/**\n * Adds a lock for the given LoRA name and loraParams.\n * @param loraName - The name of the LoRA model.\n * @param loraParams - The loraParams string to lock.\n */\nexport function addLock(loraName: string, loraParams: string) {\n    if (loraName in _lockStore) {\n        _lockStore[loraName].add(loraParams);\n    } else {\n        _lockStore[loraName] = new Set([loraParams]);\n    }\n}\n\n/**\n * Removes a lock for the given LoRA name and loraParams.\n * @param loraName - The name of the LoRA model.\n * @param loraParams - The loraParams string to unlock.\n */\nexport function removeLock(loraName: string, loraParams: string) {\n    if (loraName in _lockStore) {\n        _lockStore[loraName].delete(loraParams);\n    }\n}\n\n/**\n * Checks if the given loraParams is locked for the specified LoRA name.\n * @param loraName - The name of the LoRA model.\n * @param loraParams - The loraParams string to check.\n * @returns True if locked, false otherwise.\n */\nexport function isLocked(loraName: string, loraParams: string) {\n    if (loraName in _lockStore) {\n        return _lockStore[loraName].has(loraParams);\n    }\n    return false;\n}\n\n/**\n * Stores the histories and lock information to localStorage.\n */\nexport function storeLocalStorage() {\n    localStorage.setItem('wh://histories', JSON.stringify(_historiesStore));\n    const lockObj: Record<string, string[]> = {};\n    for (const key in _lockStore) {\n        lockObj[key] = Array.from(_lockStore[key]);\n    }\n    localStorage.setItem('wh://locks', JSON.stringify(lockObj));\n}\n\n/**\n * Loads the histories and lock information from localStorage.\n */\nexport function loadLocalStorage() {\n    const histories = localStorage.getItem('wh://histories');\n    if (histories) {\n        _historiesStore = JSON.parse(histories);\n    }\n    const locks = localStorage.getItem('wh://locks');\n    if (locks) {\n        const lockObj = JSON.parse(locks);\n        for (const key in lockObj) {\n            _lockStore[key] = new Set(lockObj[key]);\n        }\n    }\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\n\n/**\n * Returns the preset name that matches the given weights for the selected model and block type.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @param lbwPresets - The record of preset names to values.\n * @param weights - The record of block weights.\n * @returns The matching preset name, or an empty string if no match is found.\n */\nexport function getPreset(\n    selectedModelType: ModelTypes,\n    selectedLoraBlockType: LoraBlockTypes,\n    lbwPresets: Record<string, string>,\n    weights: Record<string, { value: number; checkState?: boolean }>,\n): string {\n    const maskedBlockSet = new Set(configManager.getMaskedLbwBlocks(selectedModelType, selectedLoraBlockType));\n    const weightValue = Object.entries(weights)\n        .filter(([key]) => maskedBlockSet.has(key))\n        .map((entries) => entries[1].value)\n        .join(',');\n    const foundPreset = Object.entries(lbwPresets).find(([, value]) => value === weightValue);\n    if (foundPreset) {\n        return foundPreset[0];\n    }\n    return '';\n}\n\n/**\n * Temporarily disables prompt assist features (TagAutocomplete, pilot) while executing the given function.\n * Saves the original state, executes the function, then restores the original state.\n * @param func - The function to execute with prompt assist disabled.\n */\nexport function withoutPromptAssist(func: () => void): void {\n    let tacActiveInOrg: boolean | undefined;\n    const tacEnabled = typeof window.TAC_CFG !== 'undefined' && window.TAC_CFG;\n\n    let pilotOrg: boolean | undefined;\n    const pilotEnabled = typeof window.pilotIsActive !== 'undefined' && window.pilotIsActive;\n    try {\n        if (tacEnabled) {\n            tacActiveInOrg = window.TAC_CFG.activeIn.global;\n            window.TAC_CFG.activeIn.global = false;\n        }\n        if (pilotEnabled) {\n            pilotOrg = window.pilotIsActive;\n            window.pilotIsActive = false;\n        }\n        func();\n    } finally {\n        if (tacEnabled) {\n            window.TAC_CFG.activeIn.global = tacActiveInOrg;\n        }\n        if (pilotEnabled) {\n            window.pilotIsActive = pilotOrg;\n        }\n    }\n}\n\n/**\n * Computes a simple hash code for the given string.\n * Uses a bitwise XOR and shift algorithm to generate a 32-bit integer hash.\n * @param s - The input string.\n * @returns The computed hash code as a number.\n */\nexport function strHashCode(s: string): number {\n    let hash = 0;\n    if (!s) return hash;\n    for (let i = 0; i < s.length; i++) {\n        const char = s.charCodeAt(i);\n        hash = hash ^ char;\n        hash = (hash << 5) - hash;\n    }\n    return hash & 0xffffffff;\n}\n", "import * as globalState from '@/shared/state/global-weight-helper-state';\nimport { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\n\nconst _metadataCacheStore: Record<\n    string,\n    {\n        metadataState: globalState.MetadataState | undefined;\n        selectedLoraBlockType: LoraBlockTypes;\n        selectedModelType: ModelTypes;\n        usingBlocks: Set<string> | undefined;\n    }\n> = {};\n\nconst _previewCacheStore: Record<string, globalState.PreviewState> = {};\n\n/**\n * Retrieves the metadata cache for the given LoRA name.\n * @param loraName - The name of the LoRA model.\n * @returns The cached metadata state, selected block type, model type, and used blocks, or undefined if not cached.\n */\nexport function getMetadataCache(loraName: string):\n    | {\n          metadataState: globalState.MetadataState | undefined;\n          selectedLoraBlockType: LoraBlockTypes;\n          selectedModelType: ModelTypes;\n          usingBlocks: Set<string> | undefined;\n      }\n    | undefined {\n    return _metadataCacheStore[loraName];\n}\n\n/**\n * Sets the metadata cache for the given LoRA name.\n * @param loraName - The name of the LoRA model.\n * @param cache - The BasicState containing metadata and related info to cache.\n */\nexport function setMetadataCache(loraName: string, cache: globalState.BasicState) {\n    _metadataCacheStore[loraName] = {\n        metadataState: cache.metadataState,\n        selectedLoraBlockType: cache.weightState.selectedLoraBlockType,\n        selectedModelType: cache.weightState.selectedModelType,\n        usingBlocks: cache.usingBlocks,\n    };\n}\n\n/**\n * Retrieves the preview cache for the given LoRA name.\n * @param loraName - The name of the LoRA model.\n * @returns The cached PreviewState, or undefined if not cached.\n */\nexport function getPreviewCache(loraName: string): globalState.PreviewState | undefined {\n    return _previewCacheStore[loraName];\n}\n\n/**\n * Sets the preview cache for the given LoRA name.\n * @param loraName - The name of the LoRA model.\n * @param cache - The PreviewState to cache.\n */\nexport function setPreviewCache(loraName: string, cache: globalState.PreviewState) {\n    _previewCacheStore[loraName] = cache;\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\n\nlet _tabId: string;\nlet _editor: HTMLTextAreaElement;\nlet _selectionStart: number;\nlet _selectionEnd: number;\nlet _loraDefineString: string;\nlet _lbwPresetsMap: Record<string, Record<string, Record<string, string>>> = {};\nlet _step: number = 0;\n\n/**\n * Gets the current tab ID.\n * @returns The tab ID string.\n */\nexport function getTabId(): string {\n    return _tabId;\n}\n\n/**\n * Sets the current tab ID.\n * @param tabId - The tab ID string.\n */\nexport function setTabId(tabId: string): void {\n    _tabId = tabId;\n}\n\n/**\n * Gets the current editor textarea element.\n * @returns The HTMLTextAreaElement for the editor.\n */\nexport function getEditor(): HTMLTextAreaElement {\n    return _editor;\n}\n\n/**\n * Sets the current editor textarea element.\n * @param e - The HTMLTextAreaElement to set as the editor.\n */\nexport function setEditor(e: HTMLTextAreaElement): void {\n    _editor = e;\n}\n\n/**\n * Gets the current selection start index in the editor.\n * @returns The selection start index.\n */\nexport function getSelectionStart(): number {\n    return _selectionStart;\n}\n\n/**\n * Sets the selection start index in the editor.\n * @param selectionStart - The selection start index.\n */\nexport function setSelectionStart(selectionStart: number): void {\n    _selectionStart = selectionStart;\n}\n\n/**\n * Gets the current selection end index in the editor.\n * @returns The selection end index.\n */\nexport function getSelectionEnd(): number {\n    return _selectionEnd;\n}\n\n/**\n * Sets the selection end index in the editor.\n * @param selectionEnd - The selection end index.\n */\nexport function setSelectionEnd(selectionEnd: number): void {\n    _selectionEnd = selectionEnd;\n}\n\n/**\n * Gets the current LoRA define string from the editor.\n * @returns The LoRA define string.\n */\nexport function getLoraDefineString(): string {\n    return _loraDefineString;\n}\n\n/**\n * Sets the current LoRA define string in the editor.\n * @param loraDefineString - The LoRA define string to set.\n */\nexport function setLoraDefineString(loraDefineString: string): void {\n    _loraDefineString = loraDefineString;\n}\n\n/**\n * Gets the current step value from the editor.\n * @returns The step value as a number.\n */\nexport function getStep(): number {\n    return _step || 0;\n}\n\n/**\n * Loads the step value from the editor UI for the specified tab ID.\n * @param tabId - The tab ID string.\n */\nexport function loadStep(tabId: string) {\n    const tab = gradioApp().querySelector(`div:is([id^='tab_${tabId}'][class*='tabitem'])`) as HTMLDivElement;\n    const input = tab.querySelector('div:is([id$=\"_steps\"]) input[type=number]') as HTMLInputElement;\n    _step = +input.value;\n}\n\n/**\n * Gets the LBW presets for the specified model and block type.\n * @param selectedModelType - The selected model type.\n * @param selectedLoraBlockType - The selected LoRA block type.\n * @returns A record of preset names to values.\n */\nexport function getLbwPresets(selectedModelType: ModelTypes, selectedLoraBlockType: LoraBlockTypes): Record<string, string> {\n    return _lbwPresetsMap[selectedModelType || ModelTypes.Unknown][selectedLoraBlockType || LoraBlockTypes.Unknown];\n}\n\n/**\n * Loads the LBW presets from the editor UI for the specified tab ID.\n * @param tabId - The tab ID string.\n */\nexport function loadLbwPresets(tabId: string) {\n    const tab = gradioApp().querySelector(`div:is([id^='tab_${tabId}'][class*='tabitem'])`) as HTMLDivElement;\n    const textarea = tab.querySelector('#lbw_ratiospreset textarea') as HTMLTextAreaElement;\n    const lbwPresetValue = textarea.value ?? '';\n    const lbwPresets = lbwPresetValue.split('\\n').filter((e) => e.trim() !== '');\n\n    const lbwPresetsMap: Record<string, Record<string, Record<string, string>>> = {};\n    for (const modelType of Object.values(ModelTypes)) {\n        lbwPresetsMap[modelType] = {};\n        for (const loraBlockType of Object.values(LoraBlockTypes)) {\n            const lbwPreset: Record<string, string> = {};\n            const lbwPresetValueKey: Record<string, string> = {};\n\n            lbwPresetsMap[modelType][loraBlockType] = lbwPreset;\n\n            const blockLength = configManager.getLbwMasks(modelType, loraBlockType).filter((b) => b == 1).length;\n            for (const line of lbwPresets) {\n                const kv = line.split(':');\n                if (kv.length == 2 && kv[1].split(',').length == blockLength) {\n                    lbwPreset[kv[0]] = kv[1];\n                    lbwPresetValueKey[kv[1]] = kv[0];\n                }\n            }\n        }\n    }\n    _lbwPresetsMap = lbwPresetsMap;\n}\n", "import * as globalState from '@/shared/state/global-weight-helper-state';\nimport { WeightControllerTypes } from '@/shared/types/lora-types';\n\n/**\n * Converts a string to lowercase.\n * @param str - The string to convert.\n * @returns The lowercase version of the string.\n */\nexport const lower = (str: string) => str.toLowerCase();\n\n/**\n * Returns a CSS display string to control the display property.\n * @param visible - When true, returns empty string; when false, returns 'display: none'.\n * @returns A CSS display string.\n */\nexport const getDisplayStyle = (visible: boolean) => (visible ? '' : 'display: none');\n\n/**\n * Returns a CSS visibility string to control the visibility property.\n * @param visible - When true, returns empty string; when false, returns 'visibility: hidden'.\n * @returns A CSS visibility string.\n */\nexport const getVisibilityStyle = (visible: boolean) => (visible ? '' : 'visibility: hidden');\n\n/**\n * Determines if a weight controller should be disabled based on the current state and block label.\n * @param state - The current BasicState.\n * @param blockLabel - Optional label of the weight block.\n * @returns True if the controller should be disabled, false otherwise.\n */\nexport const disabled = (state: globalState.BasicState, blockLabel: string | undefined = undefined) => {\n    if (state.uiState.isWaiting) {\n        return true;\n    }\n    switch (blockLabel) {\n        case WeightControllerTypes.TENC:\n        case WeightControllerTypes.UNET:\n        case WeightControllerTypes.START:\n        case WeightControllerTypes.STOP:\n        case undefined:\n            return false;\n    }\n    return state.usingBlocks !== undefined && !state.usingBlocks.has(blockLabel);\n};\n\n/**\n * Expands a range pattern (e.g., 'IN01-IN04') into an array of block labels.\n * If the pattern doesn't contain a valid range format, returns the pattern as a single-element array.\n * @param patterns - The range pattern string.\n * @returns An array of expanded block labels.\n */\nexport function expandRange(patterns: string): string[] {\n    const result: string[] = [];\n    patterns\n        .split(',')\n        .map((b) => b.trim())\n        .forEach((pattern) => {\n            const match = pattern.match(/^([A-Z]+)(\\d+)-\\1(\\d+)$/);\n            if (!match) {\n                result.push(pattern);\n                return;\n            }\n\n            const [, prefix, start, end] = match;\n            const startNum = parseInt(start);\n            const endNum = parseInt(end);\n\n            let i = startNum;\n            while (true) {\n                result.push(`${prefix}${i.toString().padStart(2, '0')}`);\n                if (i == endNum) {\n                    break;\n                }\n                i += startNum < endNum ? 1 : -1;\n            }\n        });\n    return result;\n}\n", "import * as cacheManager from '@/shared/manager/cache-manager';\nimport * as configManager from '@/shared/manager/config-manager';\nimport * as historyManager from '@/shared/manager/history-manager';\nimport * as currentState from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { ModelTypes, WeightControllerTypes } from '@/shared/types/lora-types';\nimport { withoutPromptAssist } from '@/shared/utils/common-utils';\nimport { lower } from '@/shared/utils/helper-utils';\n\nconst REGEX = /<(lora|lyco):([^:]+):([^>]+)>/;\n\n/**\n * Extracts the LoRA definition from the editor based on the mouse event position.\n * @param e - The mouse event from the context menu.\n * @returns Context information if a valid LoRA/lyco tag is found at the cursor position, or undefined if not found.\n */\nexport function getLoraDefineFromEditor(e: MouseEvent):\n    | {\n          tabId: string;\n          textarea: HTMLTextAreaElement;\n          selectionStart: number;\n          selectionEnd: number;\n          namespace: string;\n          loraName: string;\n          loraParams: string;\n          top: number;\n          left: number;\n      }\n    | undefined {\n    const textarea = e.target as HTMLTextAreaElement;\n    if (!opts.weight_helper_enabled) {\n        return undefined;\n    }\n    let selectedText = window.getSelection()?.toString();\n    if (selectedText) {\n        return undefined;\n    }\n    const prompt = textarea.value;\n    let tmpSelectionStart = textarea.selectionStart;\n    const lCar = prompt.lastIndexOf('<', tmpSelectionStart - 1);\n    const rCar = prompt.indexOf('>', tmpSelectionStart);\n    if (lCar < 0 || rCar < 0) {\n        return undefined;\n    }\n    selectedText = prompt.substring(lCar, rCar + 1) as string;\n    if ((selectedText.match(/</g) || []).length != 1 || (selectedText.match(/>/g) || []).length != 1) {\n        return undefined;\n    }\n    tmpSelectionStart = lCar;\n    const match = REGEX.exec(selectedText);\n    if (match) {\n        e.preventDefault();\n        const namespace = match[1].toLowerCase();\n        const loraName = match[2];\n        const loraParams = match[3];\n\n        const tabId = textarea.closest(\"[id^='tab_'][class*='tabitem']\")!.id.split('_')[1];\n        const selectionStart = tmpSelectionStart + match.index;\n        const selectionEnd = selectionStart + match.input.trim().length;\n\n        return {\n            tabId: tabId,\n            textarea: textarea,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n            namespace: namespace,\n            loraName: loraName,\n            loraParams: loraParams,\n            top: (e.pageY + 15) as number,\n            left: e.pageX as number,\n        };\n    }\n    return undefined;\n}\n\n/**\n * Updates the editor textarea with the given text at the current selection.\n * @param updatedText - The text to insert into the editor.\n */\nexport function updateEditor(updatedText: string): void {\n    const textarea = currentState.getEditor();\n    const start = currentState.getSelectionStart();\n    const end = currentState.getSelectionEnd();\n    textarea.value = textarea.value.substring(0, start) + updatedText + textarea.value.substring(end);\n    currentState.setSelectionEnd(start + updatedText.length);\n}\n\n/**\n * Updates the editor textarea with the given text using execCommand.\n * Uses this method to ensure compatibility with certain browser features.\n * @param updatedText - The text to insert into the editor.\n */\nexport function updateEditorWithExecCommand(updatedText: string): void {\n    withoutPromptAssist(() => {\n        const textarea = currentState.getEditor();\n        const start = currentState.getSelectionStart();\n        const end = currentState.getSelectionEnd();\n        textarea.focus();\n        textarea.setSelectionRange(start, end);\n        document.execCommand('insertText', false, updatedText);\n    });\n}\n\n/**\n * Generates output strings for the current LoRA configuration.\n * @param loraName - The name of the LoRA model.\n * @param weightState - The current weight state.\n * @returns An object containing the loraParams string and the complete LoRA tag.\n */\nexport function getOutputStrings(\n    loraName: string,\n    weightState: globalState.WeightState,\n): {\n    loraParams: string;\n    loraDefine: string;\n} {\n    let updatedText = String(weightState.weights[WeightControllerTypes.TENC].value);\n    let refIdx = 0;\n    let idx = 0;\n    for (const keyType of [WeightControllerTypes.UNET]) {\n        const weight = weightState.weights[keyType];\n        const defVal = configManager.getWeightControllerConfig(keyType as WeightControllerTypes).default;\n        const val = +weight.value;\n        if (weight.checkState || (weight.checkState === undefined && val != defVal)) {\n            if (idx === refIdx) {\n                updatedText += `:${val}`;\n            } else {\n                updatedText += `:${lower(keyType)}=${val}`;\n            }\n            refIdx++;\n        }\n        idx++;\n    }\n    const startDefVal = configManager.getWeightControllerConfig(WeightControllerTypes.START).default;\n    const startVal = weightState.weights[WeightControllerTypes.START].value;\n    const stopDefVal = configManager.getWeightControllerConfig(WeightControllerTypes.STOP).default;\n    let stopVal = weightState.weights[WeightControllerTypes.STOP].value;\n    if (stopVal < 0) {\n        stopVal = configManager.getWeightControllerConfig(WeightControllerTypes.STOP).default;\n    }\n    if (startVal != startDefVal && stopVal != stopDefVal) {\n        updatedText += `:step=${startVal}-${stopVal}`;\n    } else if (startVal != startDefVal) {\n        updatedText += `:start=${startVal}`;\n    } else if (stopVal != stopDefVal) {\n        updatedText += `:stop=${stopVal}`;\n    }\n\n    const { selectedModelType, selectedLoraBlockType } = weightState;\n    const xyzValue = weightState.xyzMode;\n\n    let updatedTextWithPreset = updatedText;\n    if (xyzValue) {\n        updatedText += `:lbw=XYZ`;\n        updatedTextWithPreset += `:lbw=XYZ`;\n    } else if (selectedModelType !== ModelTypes.Unknown) {\n        const lbwWeights = configManager\n            .getLbwMasks(selectedModelType, selectedLoraBlockType)\n            .map((mask, i) => {\n                if (mask === 1) {\n                    return weightState.weights[configManager.getLbwBlocks(selectedModelType)[i]];\n                }\n                return undefined;\n            })\n            .filter((block) => block !== undefined);\n        const lbwDefault = configManager.getWeightControllerConfig(WeightControllerTypes.LBW).default;\n        if (!lbwWeights.every((weight) => weight.value === lbwDefault)) {\n            const lbwValues = lbwWeights.map((weight) => weight.value).join(',');\n\n            updatedText += `:lbw=${lbwValues}`;\n            const lbwPresets = currentState.getLbwPresets(selectedModelType, selectedLoraBlockType);\n            const preset = Object.entries(lbwPresets).find(([, value]) => lbwValues === value);\n            if (preset) {\n                updatedTextWithPreset += `:lbw=${preset[0]}`;\n            } else {\n                updatedTextWithPreset += `:lbw=${lbwValues}`;\n            }\n        }\n    }\n    if (weightState.lbwe) {\n        updatedText += `:lbwe=${weightState.lbwe}`;\n        updatedTextWithPreset += `:lbwe=${weightState.lbwe}`;\n    }\n    return {\n        loraParams: updatedText,\n        loraDefine: `<lora:${loraName}:${updatedTextWithPreset}>`,\n    };\n}\n\n/**\n * Synchronizes the editor with the current Weight Helper state.\n * Updates the cache and history, and optionally cancels changes.\n * @param state - The current Weight Helper state.\n * @param cancel - When true, cancels changes and restores the original editor content.\n */\nexport function syncEditorWithState(state: globalState.BasicState, cancel: boolean = false): void {\n    const outputStrings = getOutputStrings(state.loraName, state.weightState);\n    if (!opts.weight_helper_using_execCommand) {\n        if (cancel) {\n            updateEditor(currentState.getLoraDefineString());\n        }\n    } else {\n        if (state.srcLoraParams !== outputStrings.loraParams) {\n            updateEditorWithExecCommand(outputStrings.loraDefine);\n        }\n    }\n    cacheManager.setMetadataCache(state.loraName, state);\n    if (!state.weightState.xyzMode) {\n        historyManager.addHistory(state.loraName, { loraParams: outputStrings.loraParams, ...state.weightState });\n    }\n    historyManager.storeLocalStorage();\n}\n", "import * as historyManager from '@/shared/manager/history-manager';\nimport { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\nimport { getPreset } from '@/shared/utils/common-utils';\nimport { getOutputStrings, updateEditor } from '@/shared/utils/editor-utils';\n\n// Type definitions migrated from former context-based implementation\nexport interface BasicState {\n    loraName: string;\n    metadataState: MetadataState | undefined;\n    srcLoraParams: string;\n    weightState: WeightState;\n    blockGroups: string[][];\n    preset: string;\n    lbwPresets: Record<string, string>;\n    usingBlocks: Set<string> | undefined;\n    uiState: UiState;\n    lock: boolean;\n    historyIndex: number;\n    previewState: PreviewState;\n}\n\nexport interface MetadataState {\n    baseModel: string;\n    modelType: string;\n    algorithm: string;\n}\n\nexport interface WeightState {\n    selectedModelType: ModelTypes;\n    selectedLoraBlockType: LoraBlockTypes;\n    weights: Record<string, WeightControlState>;\n    lbwe: string;\n    xyzMode: boolean;\n}\n\nexport interface WeightControlState {\n    initValue: number;\n    value: number;\n    sliderMin: number;\n    sliderMax: number;\n    initCheckState?: boolean | undefined;\n    checkState?: boolean | undefined;\n}\n\nexport interface UiState {\n    isVisible: boolean;\n    scale: number;\n    isMoreButtonVisible: boolean;\n    isWaiting: boolean;\n}\n\nexport interface PreviewState {\n    modelId: string;\n    triggerWords: string[];\n    negativeTriggerWords: string[];\n    modelName: string;\n    thumbUrl: string;\n    hasMetadata: boolean;\n    description: string;\n    isDescriptionVisible: boolean;\n    isTagInsertButtonVisible: boolean;\n}\n\n// Global mutable state (single source of truth outside of position which is applied directly to DOM)\nlet globalState: BasicState;\n\n// Callbacks for full state changes (require template re-render)\nconst stateChangeCallbacks: Array<(state: BasicState) => void> = [];\n// Callbacks for position-only changes (avoid full re-render; DOM style mutation only)\nconst positionChangeCallbacks: Array<(pos: { top: number; left: number }) => void> = [];\n\n// Notify subscribers about a full state change\nfunction notifyStateChange(): void {\n    stateChangeCallbacks.forEach((callback) => callback(globalState));\n}\n\n// Notify subscribers about position-only change\nfunction notifyPositionChange(pos: { top: number; left: number }): void {\n    positionChangeCallbacks.forEach((callback) => callback(pos));\n}\n\n/**\n * Subscribe to full state changes.\n * @param callback invoked whenever global state mutates.\n * @returns unsubscribe function\n */\nexport function subscribeToStateChanges(callback: (state: BasicState) => void): () => void {\n    stateChangeCallbacks.push(callback);\n    return () => {\n        const index = stateChangeCallbacks.indexOf(callback);\n        if (index > -1) {\n            stateChangeCallbacks.splice(index, 1);\n        }\n    };\n}\n\n/**\n * Subscribe to position-only changes (top/left) used for dragging the UI.\n * @param callback invoked with new {top,left}\n * @returns unsubscribe function\n */\nexport function subscribeToPositionChanges(callback: (pos: { top: number; left: number }) => void): () => void {\n    positionChangeCallbacks.push(callback);\n    return () => {\n        const index = positionChangeCallbacks.indexOf(callback);\n        if (index > -1) {\n            positionChangeCallbacks.splice(index, 1);\n        }\n    };\n}\n\n/** Get current global state snapshot (do not mutate directly). */\nexport function getGlobalState(): BasicState {\n    return globalState;\n}\n\n/** Initialize state (triggers initial render). */\nexport function initializeGlobalState(initialState: BasicState): void {\n    globalState = initialState;\n    notifyStateChange();\n}\n\n// OPEN_CONTEXT\nexport function openContext(payload: BasicState): void {\n    globalState = payload;\n    notifyStateChange();\n}\n\n// CLOSE_CONTEXT\nexport function closeContext(payload: BasicState): void {\n    globalState = payload;\n    notifyStateChange();\n}\n\n// SET_POSITION (excluded from main state to avoid re-render on drag)\nexport function setPosition(top: number, left: number): void {\n    // Don't persist in state; this is transient UI positioning.\n    notifyPositionChange({ top, left });\n}\n\n// LOAD_METADATA\nexport function loadMetadata(payload: {\n    algorithm: string;\n    baseModel: string;\n    modelType: string;\n    selectedModelType: ModelTypes;\n    usingBlocks: string[] | null | undefined;\n    blockGroups: string[][];\n    weights: Record<string, WeightControlState>;\n    lbwPresets: Record<string, string>;\n}): void {\n    const newState = {\n        ...globalState,\n        metadataState: {\n            ...globalState.metadataState,\n            algorithm: payload.algorithm || 'Unknown',\n            baseModel: payload.baseModel || 'Unknown',\n            modelType: payload.modelType || 'Unknown',\n        },\n        weightState: {\n            ...globalState.weightState,\n            selectedModelType: payload.selectedModelType,\n            weights: payload.weights,\n        },\n        blockGroups: payload.blockGroups,\n        lbwPresets: payload.lbwPresets,\n        uiState: {\n            ...globalState.uiState,\n            isWaiting: false,\n        },\n    };\n    if (payload.usingBlocks === null) {\n        newState.usingBlocks = undefined;\n    } else if (payload.usingBlocks) {\n        newState.usingBlocks = new Set(payload.usingBlocks);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// SET_WAITING\nexport function setWaiting(isWaiting: boolean): void {\n    globalState = {\n        ...globalState,\n        uiState: {\n            ...globalState.uiState,\n            isWaiting: isWaiting,\n        },\n    };\n    notifyStateChange();\n}\n\n// SET_MODELINFO\nexport function setModelInfo(payload: {\n    selectedModelType: ModelTypes;\n    selectedLoraBlockType: LoraBlockTypes;\n    blockGroups: string[][];\n    lbwPresets: Record<string, string>;\n    weights: Record<string, WeightControlState>;\n}): void {\n    const newState = {\n        ...globalState,\n        weightState: {\n            ...globalState.weightState,\n            selectedLoraBlockType: payload.selectedLoraBlockType,\n            selectedModelType: payload.selectedModelType,\n            weights: payload.weights,\n        },\n        blockGroups: payload.blockGroups,\n        lbwPresets: payload.lbwPresets,\n    };\n    if (!opts.weight_helper_using_execCommand) {\n        updateEditor(getOutputStrings(newState.loraName, newState.weightState).loraDefine);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// TOGGLE_XYZ_MODE\nexport function toggleXyzMode(): void {\n    const newState = {\n        ...globalState,\n        weightState: {\n            ...globalState.weightState,\n            xyzMode: !globalState.weightState.xyzMode,\n        },\n    };\n    if (!opts.weight_helper_using_execCommand) {\n        updateEditor(getOutputStrings(newState.loraName, newState.weightState).loraDefine);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// SET_PRESET\nexport function setPreset(payload: { weights: Record<string, WeightControlState>; preset: string }): void {\n    const weightState = {\n        ...globalState.weightState,\n        weights: {\n            ...globalState.weightState.weights,\n            ...payload.weights,\n        },\n    };\n    const outputStrings = getOutputStrings(globalState.loraName, weightState);\n    const locked = historyManager.isLocked(globalState.loraName, outputStrings.loraParams);\n\n    const newState = {\n        ...globalState,\n        weightState: weightState,\n        preset: payload.preset,\n        lock: locked,\n    };\n    if (!opts.weight_helper_using_execCommand) {\n        updateEditor(outputStrings.loraDefine);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// TOGGLE_LOCK_STATUS\nexport function toggleLockStatus(): void {\n    const outputLoraParams = getOutputStrings(globalState.loraName, globalState.weightState).loraParams;\n    const locked = historyManager.isLocked(globalState.loraName, outputLoraParams);\n    if (locked) {\n        historyManager.removeLock(globalState.loraName, outputLoraParams);\n    } else {\n        historyManager.addLock(globalState.loraName, outputLoraParams);\n    }\n    globalState = {\n        ...globalState,\n        lock: !locked,\n    };\n    notifyStateChange();\n}\n\n// SET_HISTORY\nexport function setHistory(payload: {\n    historyIndex: number;\n    weightState: {\n        selectedModelType: ModelTypes;\n        selectedLoraBlockType: LoraBlockTypes;\n        weights: Record<string, WeightControlState>;\n        lbwe: string;\n        xyzMode: boolean;\n    };\n    preset: string;\n    locked: boolean;\n}): void {\n    const { locked, historyIndex, preset } = payload;\n    const { selectedLoraBlockType, selectedModelType, weights, lbwe, xyzMode } = payload.weightState;\n    const weightState = {\n        ...globalState.weightState,\n        weights: {\n            ...globalState.weightState.weights,\n            ...weights,\n        },\n        selectedLoraBlockType: selectedLoraBlockType,\n        selectedModelType: selectedModelType,\n        lbwe: lbwe,\n        xyzMode: xyzMode,\n    };\n    const newState = {\n        ...globalState,\n        historyIndex: historyIndex,\n        preset: preset,\n        weightState: weightState,\n        lock: locked,\n    };\n    if (!opts.weight_helper_using_execCommand) {\n        updateEditor(getOutputStrings(newState.loraName, newState.weightState).loraDefine);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// SET_HISTORY_INDEX\nexport function setHistoryIndex(historyIndex: number): void {\n    globalState = {\n        ...globalState,\n        historyIndex: historyIndex,\n    };\n    notifyStateChange();\n}\n\n// SET_WEIGHT\nexport function setWeight(payload: { block: string; value: number; checkState?: boolean }): void {\n    globalState.weightState.xyzMode = false;\n    const weights = {\n        ...globalState.weightState.weights,\n        [payload.block]: {\n            ...globalState.weightState.weights[payload.block],\n            value: payload.value,\n            sliderMin: Math.min(payload.value, globalState.weightState.weights[payload.block].sliderMin),\n            sliderMax: Math.max(payload.value, globalState.weightState.weights[payload.block].sliderMax),\n            checkState: payload.checkState,\n        },\n    };\n    const weightState = {\n        ...globalState.weightState,\n        weights,\n        xyzMode: false,\n    };\n\n    const outputStrings = getOutputStrings(globalState.loraName, weightState);\n    const locked = historyManager.isLocked(globalState.loraName, outputStrings.loraParams);\n\n    const newState = {\n        ...globalState,\n        weightState: weightState,\n        preset: getPreset(globalState.weightState.selectedModelType, globalState.weightState.selectedLoraBlockType, globalState.lbwPresets, weights),\n        lock: locked,\n    };\n    if (!opts.weight_helper_using_execCommand) {\n        updateEditor(outputStrings.loraDefine);\n    }\n    globalState = newState;\n    notifyStateChange();\n}\n\n// HIDE_MORE_BUTTON\nexport function hideMoreButton(): void {\n    globalState = {\n        ...globalState,\n        uiState: {\n            ...globalState.uiState,\n            isMoreButtonVisible: false,\n        },\n    };\n    notifyStateChange();\n}\n\n// CLEAR_HISTORY\nexport function clearHistory(): void {\n    historyManager.clearHistories(globalState.loraName);\n    if (!globalState.weightState.xyzMode) {\n        historyManager.addHistory(globalState.loraName, {\n            loraParams: getOutputStrings(globalState.loraName, globalState.weightState).loraParams,\n            ...globalState.weightState,\n        });\n    }\n    const historyIndex = historyManager.getHistories(globalState.loraName).length - 1;\n    globalState = {\n        ...globalState,\n        historyIndex: historyIndex < 0 ? 0 : historyIndex,\n    };\n    notifyStateChange();\n}\n\n// LOAD_PREVIEW_DATA\nexport function loadPreviewData(payload: PreviewState): void {\n    globalState = {\n        ...globalState,\n        previewState: payload,\n    };\n    notifyStateChange();\n}\n\n// SET_PREVIEW_DESCRIPTION_VISIBLE\nexport function setPreviewDescriptionVisible(isVisible: boolean): void {\n    globalState = {\n        ...globalState,\n        previewState: {\n            ...globalState.previewState,\n            isDescriptionVisible: isVisible,\n        },\n    };\n    notifyStateChange();\n}\n\n// HIDE_TAG_INSERT_BUTTON\nexport function hideTagInsertButton(): void {\n    globalState = {\n        ...globalState,\n        previewState: {\n            ...globalState.previewState,\n            isTagInsertButtonVisible: false,\n        },\n    };\n    notifyStateChange();\n}\n", "import { CARD_NO_IMAGE_PATH, SELECTABLE_LORA_BLOCK_TYPES, SELECTABLE_MODEL_TYPES } from '@/shared/constants/common-const';\nimport * as cacheManager from '@/shared/manager/cache-manager';\nimport * as configManager from '@/shared/manager/config-manager';\nimport * as historyManager from '@/shared/manager/history-manager';\nimport * as currentState from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport * as loraTypes from '@/shared/types/lora-types';\nimport { LoraDefineParams, WeightControllerTypes } from '@/shared/types/lora-types';\nimport { getPreset } from '@/shared/utils/common-utils';\nimport { getOutputStrings } from '@/shared/utils/editor-utils';\n\n/**\n * Creates and returns the initial state for the Weight Helper UI.\n * @returns The initial BasicState object for the Weight Helper.\n */\nexport function createWeightHelperInitState(): globalState.BasicState {\n    const weightHelperProps: globalState.BasicState = {\n        loraName: '',\n        metadataState: undefined,\n        srcLoraParams: '',\n        weightState: {\n            selectedLoraBlockType: loraTypes.LoraBlockTypes.lora,\n            selectedModelType: loraTypes.ModelTypes.SD,\n            weights: {},\n            lbwe: '',\n            xyzMode: false,\n        },\n        blockGroups: [],\n        usingBlocks: undefined,\n        preset: '',\n        lbwPresets: {},\n        uiState: {\n            isVisible: false,\n            scale: 1,\n            isMoreButtonVisible: true,\n            isWaiting: false,\n        },\n        lock: false,\n        historyIndex: 0,\n        previewState: {\n            modelId: '',\n            triggerWords: [],\n            negativeTriggerWords: [],\n            modelName: '',\n            thumbUrl: '',\n            hasMetadata: false,\n            description: '',\n            isDescriptionVisible: false,\n            isTagInsertButtonVisible: false,\n        },\n    };\n    return weightHelperProps;\n}\n\n/**\n * Creates and returns the Weight Helper state based on the given parameters.\n * @param namespace - The namespace (e.g., 'lora' or 'lycoris').\n * @param loraName - The name of the LoRA model.\n * @param loraParams - The loraParams string.\n * @param top - The top position for the UI.\n * @param left - The left position for the UI.\n * @returns The constructed BasicState object.\n */\nexport function createWeightHelperState(namespace: string, loraName: string, loraParams: string): globalState.BasicState {\n    let selectedModelType: loraTypes.ModelTypes = loraTypes.ModelTypes.Unknown;\n    let selectedLoraBlockType: loraTypes.LoraBlockTypes = loraTypes.LoraBlockTypes.Unknown;\n    const histories = historyManager.getHistories(loraName);\n    if (histories && histories.length > 0) {\n        const latest = histories[histories.length - 1];\n        selectedModelType = latest.selectedModelType ?? loraTypes.ModelTypes.Unknown;\n        selectedLoraBlockType = latest.selectedLoraBlockType ?? loraTypes.LoraBlockTypes.Unknown;\n    }\n\n    let metadataState: globalState.MetadataState | undefined;\n    let usingBlocks: Set<string> | undefined;\n    const metadataCache = cacheManager.getMetadataCache(loraName);\n    if (metadataCache) {\n        metadataState = metadataCache.metadataState;\n        selectedModelType = metadataCache.selectedModelType ?? loraTypes.ModelTypes.Unknown;\n        selectedLoraBlockType = metadataCache.selectedLoraBlockType ?? loraTypes.LoraBlockTypes.Unknown;\n        usingBlocks = metadataCache.usingBlocks;\n    }\n\n    const weightState = createWeightState(namespace, loraParams, selectedModelType, selectedLoraBlockType);\n\n    const lbwPresets = currentState.getLbwPresets(weightState.selectedModelType, weightState.selectedLoraBlockType);\n\n    const outputLoraParams = getOutputStrings(loraName, weightState).loraParams;\n\n    // Determine if the \"show more options\" button should appear (hidden when any advanced param differs)\n    let isMoreButtonVisible = false;\n    for (const keyType of [WeightControllerTypes.UNET, WeightControllerTypes.START, WeightControllerTypes.STOP]) {\n        const weight = weightState.weights[keyType];\n        const defVal = configManager.getWeightControllerConfig(keyType as WeightControllerTypes).default;\n        const val = +weight.value;\n        if (weight.checkState || (weight.checkState === undefined && val != defVal)) {\n        } else {\n            isMoreButtonVisible = true;\n            break;\n        }\n    }\n    return {\n        loraName: loraName,\n        metadataState: metadataState,\n        srcLoraParams: outputLoraParams,\n        weightState: weightState,\n        blockGroups: configManager.getLbwBlockGroups(weightState.selectedModelType, weightState.selectedLoraBlockType),\n        usingBlocks: usingBlocks,\n        uiState: {\n            isVisible: true,\n            scale: opts.weight_helper_context_menu_scale,\n            isMoreButtonVisible: isMoreButtonVisible,\n            isWaiting: !metadataState,\n        },\n        previewState: createPreviewState(loraName),\n        preset: getPreset(weightState.selectedModelType, weightState.selectedLoraBlockType, lbwPresets, weightState.weights),\n        lbwPresets: lbwPresets,\n        lock: historyManager.isLocked(loraName, outputLoraParams),\n        historyIndex: histories.length - 1,\n    };\n}\n\n/**\n * Creates and returns the WeightState object from the given parameters.\n * @param namespace - The namespace (e.g., 'lora' or 'lycoris').\n * @param loraParams - The loraParams string.\n * @param modelType - The model type.\n * @param loraBlockType - The LoRA block type.\n * @returns The constructed WeightState object.\n */\nexport function createWeightState(\n    namespace: string,\n    loraParams: string,\n    modelType: loraTypes.ModelTypes,\n    loraBlockType: loraTypes.LoraBlockTypes,\n): {\n    selectedLoraBlockType: loraTypes.LoraBlockTypes;\n    selectedModelType: loraTypes.ModelTypes;\n    weights: Record<string, globalState.WeightControlState>;\n    lbwe: string;\n    xyzMode: boolean;\n} {\n    const loraParamsProps = createLoraParamsState(loraParams, modelType, loraBlockType);\n    const { weights, lbwe, xyzMode } = loraParamsProps;\n\n    if (loraBlockType === loraTypes.LoraBlockTypes.Unknown) {\n        loraBlockType = namespace === 'lora' ? loraTypes.LoraBlockTypes.lora : loraTypes.LoraBlockTypes.lycoris;\n    }\n\n    return {\n        selectedLoraBlockType: loraBlockType,\n        selectedModelType: modelType,\n        weights: weights,\n        lbwe: lbwe,\n        xyzMode: xyzMode,\n    };\n}\n\n/**\n * Parses the loraParams string and creates the corresponding state for loraParamss, weights, and related flags.\n * @param loraParams - The loraParams string.\n * @param modelType - The model type.\n * @param loraBlockType - The LoRA block type.\n * @returns The parsed state including weights, lbwe, and xyzMode.\n */\nexport function createLoraParamsState(\n    loraParams: string,\n    modelType: loraTypes.ModelTypes,\n    loraBlockType: loraTypes.LoraBlockTypes,\n): {\n    selectedModelType: loraTypes.ModelTypes;\n    selectedLoraBlockType: loraTypes.LoraBlockTypes;\n    weights: Record<string, globalState.WeightControlState>;\n    lbwe: string;\n    xyzMode: boolean;\n} {\n    const loraParamss = loraParams.split(':');\n\n    const loraParamsMap: Record<string, string> = {};\n    for (let i = 0; i < loraParamss.length; i++) {\n        let key: string;\n        let value: string;\n        if (loraParamss[i].indexOf('=') >= 0) {\n            const keyValue = loraParamss[i].split('=');\n            key = keyValue[0].toLowerCase();\n            value = keyValue[1];\n        } else {\n            key = [LoraDefineParams.te, LoraDefineParams.unet][i];\n            value = loraParamss[i];\n        }\n        loraParamsMap[key] = value;\n    }\n\n    const loraSdCombination: {\n        modelType: loraTypes.ModelTypes;\n        loraBlockType: loraTypes.LoraBlockTypes;\n        presets: Record<string, string>;\n        masks: number[];\n    }[] = [];\n    for (const modelType of Object.values(SELECTABLE_MODEL_TYPES)) {\n        for (const loraBlockType of Object.values(SELECTABLE_LORA_BLOCK_TYPES)) {\n            loraSdCombination.push({\n                modelType: modelType,\n                loraBlockType: loraBlockType,\n                presets: currentState.getLbwPresets(modelType, loraBlockType),\n                masks: configManager.getLbwMasks(modelType, loraBlockType),\n            });\n        }\n    }\n\n    let te = configManager.getWeightControllerConfig(WeightControllerTypes.TENC).default;\n    let unet: number | undefined = undefined;\n\n    let vStart = configManager.getWeightControllerConfig(WeightControllerTypes.START).default;\n    let vStop = configManager.getWeightControllerConfig(WeightControllerTypes.STOP).default;\n\n    const lbwVals: number[] = [];\n    let lbwe: string = '';\n    let xyzModeFlag = false;\n\n    Object.entries(loraParamsMap).forEach(([loraParamKey, value]) => {\n        switch (loraParamKey) {\n            case LoraDefineParams.lbw:\n                if (value === 'XYZ') {\n                    xyzModeFlag = true;\n                    break;\n                }\n                let blocks = value.split(',');\n                for (const loraSd of loraSdCombination) {\n                    if (blocks.length === 1) {\n                        if (value in loraSd.presets) {\n                            blocks = loraSd.presets[value].split(',');\n                        } else {\n                            continue;\n                        }\n                    }\n                    if (blocks.length === loraSd.masks.filter((b) => b == 1).length) {\n                        modelType = loraSd.modelType;\n                        loraBlockType = loraSd.loraBlockType;\n                        let refIdx = 0;\n                        for (const enable of loraSd.masks) {\n                            if (enable) {\n                                lbwVals.push(+blocks[refIdx]);\n                                refIdx++;\n                            } else {\n                                lbwVals.push(0);\n                            }\n                        }\n                        break;\n                    }\n                }\n                break;\n            case LoraDefineParams.step:\n                const startStop = value.split('-');\n                vStart = Math.round(+startStop[0]);\n                vStop = Math.round(+startStop[1]);\n                break;\n            case LoraDefineParams.lbwe:\n                lbwe = value;\n                break;\n            case LoraDefineParams.te:\n                te = +value;\n                break;\n            case LoraDefineParams.unet:\n                unet = +value;\n                break;\n            case LoraDefineParams.start:\n                vStart = Math.round(+value);\n                break;\n            case LoraDefineParams.stop:\n                vStop = Math.round(+value);\n                break;\n        }\n    });\n\n    // Flag indicating whether UNET weight was explicitly specified\n    let useUnet = true;\n    if (unet === undefined) {\n        unet = configManager.getWeightControllerConfig(WeightControllerTypes.UNET).default;\n        useUnet = false;\n    }\n\n    const lbws: Record<string, globalState.WeightControlState> = {};\n    if (modelType !== loraTypes.ModelTypes.Unknown) {\n        const blocks = configManager.getLbwBlocks(modelType);\n        if (lbwVals.length === 0) {\n            for (let i = 0; i < blocks.length; i++) {\n                lbwVals.push(configManager.getWeightControllerConfig(WeightControllerTypes.LBW).default);\n            }\n        }\n        lbwVals.forEach((lbw, i) => {\n            lbws[blocks[i]] = {\n                initValue: lbw,\n                value: lbw,\n                sliderMin: Math.min(lbw, configManager.getWeightControllerConfig(WeightControllerTypes.LBW).min),\n                sliderMax: Math.max(lbw, configManager.getWeightControllerConfig(WeightControllerTypes.LBW).max),\n            };\n        });\n    }\n\n    return {\n        selectedLoraBlockType: loraBlockType,\n        selectedModelType: modelType,\n        weights: {\n            [WeightControllerTypes.TENC]: {\n                initValue: te,\n                value: te,\n                sliderMin: Math.min(te, configManager.getWeightControllerConfig(WeightControllerTypes.TENC).min),\n                sliderMax: Math.max(te, configManager.getWeightControllerConfig(WeightControllerTypes.TENC).max),\n            },\n            [WeightControllerTypes.UNET]: {\n                initValue: unet,\n                value: unet,\n                sliderMin: Math.min(unet, configManager.getWeightControllerConfig(WeightControllerTypes.UNET).min),\n                sliderMax: Math.max(unet, configManager.getWeightControllerConfig(WeightControllerTypes.UNET).max),\n                initCheckState: useUnet,\n                checkState: useUnet,\n            },\n            [WeightControllerTypes.START]: {\n                initValue: vStart,\n                value: vStart,\n                sliderMin: Math.min(vStart, configManager.getWeightControllerConfig(WeightControllerTypes.START).min),\n                sliderMax: Math.max(vStart, configManager.getWeightControllerConfig(WeightControllerTypes.START).max),\n            },\n            [WeightControllerTypes.STOP]: {\n                initValue: vStop,\n                value: vStop,\n                sliderMin: Math.min(vStop, configManager.getWeightControllerConfig(WeightControllerTypes.STOP).min),\n                sliderMax: Math.max(vStop, configManager.getWeightControllerConfig(WeightControllerTypes.STOP).max),\n            },\n            ...lbws,\n        },\n        lbwe: lbwe,\n        xyzMode: xyzModeFlag,\n    };\n}\n\n/**\n * Creates and returns the PreviewState for the given loraName, using cache if available.\n * @param loraName - The name of the LoRA model.\n * @returns The PreviewState object for the given LoRA model.\n */\nfunction createPreviewState(loraName: string): globalState.PreviewState {\n    const previewCache = cacheManager.getPreviewCache(loraName);\n    if (previewCache) {\n        return previewCache;\n    }\n    return {\n        modelId: '',\n        triggerWords: [''],\n        negativeTriggerWords: [''],\n        modelName: '',\n        thumbUrl: CARD_NO_IMAGE_PATH,\n        hasMetadata: false,\n        description: '',\n        isDescriptionVisible: false,\n        isTagInsertButtonVisible: false,\n    };\n}\n", "let metadataAbortController: AbortController | null = null;\nlet previewAbortController: AbortController | null = null;\n\n/**\n * Returns the global AbortController for metadata fetch requests.\n * Creates a new controller if one doesn't exist.\n * @returns The AbortController instance for metadata requests.\n */\nexport function getMetadataAbortController(): AbortController {\n    if (!metadataAbortController) {\n        metadataAbortController = new AbortController();\n    }\n    return metadataAbortController;\n}\n\n/**\n * Aborts any ongoing metadata fetch request and creates a new AbortController.\n * @returns The new AbortController instance for metadata requests.\n */\nexport function resetMetadataAbortController(): AbortController {\n    if (metadataAbortController) {\n        metadataAbortController.abort();\n    }\n    metadataAbortController = new AbortController();\n    return metadataAbortController;\n}\n\n/**\n * Returns the global AbortController for preview fetch requests.\n * Creates a new controller if one doesn't exist.\n * @returns The AbortController instance for preview requests.\n */\nexport function getPreviewAbortController(): AbortController {\n    if (!previewAbortController) {\n        previewAbortController = new AbortController();\n    }\n    return previewAbortController;\n}\n\n/**\n * Aborts any ongoing preview fetch request and creates a new AbortController.\n * @returns The new AbortController instance for preview requests.\n */\nexport function resetPreviewAbortController(): AbortController {\n    if (previewAbortController) {\n        previewAbortController.abort();\n    }\n    previewAbortController = new AbortController();\n    return previewAbortController;\n}\n", "import * as globalState from '@/shared/state/global-weight-helper-state';\nimport { ModelTypes } from '@/shared/types/lora-types';\n\n/**\n * Fetches metadata for the specified LoRA model from the backend API.\n * @param loraName - The name of the LoRA model.\n * @param force - Whether to force a refresh of the metadata regardless of cache.\n * @param signal - Optional AbortSignal for canceling the request.\n * @returns A promise resolving to the metadata object.\n */\nexport async function fetchMetadata(\n    loraName: string,\n    force: boolean,\n    signal?: AbortSignal,\n): Promise<{ algorithm: string; baseModel: string; modelType: ModelTypes; usingBlocks: string[] | null }> {\n    const res = await fetch(`/whapi/v1/get_metadata?key=${encodeURIComponent(loraName)}&force=${force}`, {\n        method: 'POST',\n        signal: signal,\n    });\n    if (!res.ok) {\n        throw new Error(`Failed to set up API endpoints. Please reload the page.: ${res.status}`);\n    }\n    return await res.json();\n}\n\n/**\n * Fetches preview information for the specified LoRA model from the backend API.\n * @param loraName - The name of the LoRA model.\n * @param signal - Optional AbortSignal for canceling the request.\n * @returns A promise resolving to the PreviewState object.\n */\nexport async function fetchPreviewData(loraName: string, signal?: AbortSignal): Promise<globalState.PreviewState> {\n    const res = await fetch(`/whapi/v1/get_preview_info?key=${encodeURIComponent(loraName)}`, {\n        method: 'POST',\n        signal: signal,\n    });\n    if (!res.ok) {\n        throw new Error(`Failed to set up API endpoints. Please reload the page.: ${res.status}`);\n    }\n    const json = await res.json();\n    return {\n        ...json,\n        isDescriptionVisible: false,\n        isTagInsertButtonVisible: true,\n    };\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { WeightControllerTypes } from '@/shared/types/lora-types';\nimport { expandRange } from '@/shared/utils/helper-utils';\n\n/**\n * Merges the current weights with the given block groups.\n * Ensures that all blocks from the expanded groups are present in the weights object.\n * If a block is missing, it is initialized with the default LBW value.\n * @param currentWeights - The current record of block weights.\n * @param groups - The array of block group strings (may include range patterns).\n * @returns The updated record of block weights including all blocks from the groups.\n */\nexport function mergeWeightsWithGroups(\n    currentWeights: Record<string, globalState.WeightControlState>,\n    groups: string[][],\n): Record<string, globalState.WeightControlState> {\n    const updatedWeights = { ...currentWeights };\n\n    const allBlocks: string[] = [];\n    groups.forEach((cols) => {\n        cols.forEach((group) => {\n            const expandedBlocks = expandRange(group);\n            expandedBlocks.forEach((block) => {\n                if (!allBlocks.includes(block)) {\n                    allBlocks.push(block);\n                }\n            });\n        });\n    });\n\n    allBlocks.forEach((block) => {\n        if (!updatedWeights[block]) {\n            updatedWeights[block] = {\n                initValue: configManager.getWeightControllerConfig(WeightControllerTypes.LBW).default,\n                value: configManager.getWeightControllerConfig(WeightControllerTypes.LBW).default,\n                sliderMin: configManager.getWeightControllerConfig(WeightControllerTypes.LBW).min,\n                sliderMax: configManager.getWeightControllerConfig(WeightControllerTypes.LBW).max,\n            };\n        }\n    });\n\n    return updatedWeights;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib/index.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (\n      !global.litIssuedWarnings!.has(warning) &&\n      !global.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  queueMicrotask(() => {\n    issueWarning(\n      'dev-mode',\n      `Lit is in dev mode. Not recommended for production!`\n    );\n  });\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for child parts\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`'\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives\n   *     in those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start !== this._$endNode) {\n      // The non-null assertion is safe because if _$startNode.nextSibling is\n      // null, then _$endNode is also null, and we would not have entered this\n      // loop.\n      const n = wrap(start!).nextSibling;\n      wrap(start!).remove();\n      start = n;\n    }\n  }\n\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.3.1');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning!(\n      'multiple-versions',\n      `Multiple versions of Lit loaded. ` +\n        `Loading multiple versions is not recommended.`\n    );\n  });\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { WeightControllerTypes } from '@/shared/types/lora-types';\nimport { disabled } from '@/shared/utils/helper-utils';\n\nimport { TemplateResult, html } from 'lit-html';\n\n/**\n * WeightController component provides UI controls for adjusting weight values.\n * Displays a label, optional checkbox, slider, and number input for a weight parameter.\n * @param label - The identifier for the weight block.\n * @param values - The record of all weight values.\n * @returns The WeightController template.\n */\nexport function createWeightController(label: string, values: Record<string, globalState.WeightControlState>): TemplateResult {\n    const state = globalState.getGlobalState();\n    const config = configManager.getWeightControllerConfig(label) ?? configManager.getWeightControllerConfig(WeightControllerTypes.LBW);\n\n    /**\n     * Handles the change event for the weight checkbox.\n     * Updates the check state for the weight block.\n     * @param e - The input change event.\n     */\n    const handleChangeWeightCheck = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        globalState.setWeight({\n            block: label,\n            value: state.weightState.weights[label].value,\n            checkState: target.checked,\n        });\n    };\n\n    /**\n     * Handles the change event for the weight slider.\n     * Updates the value and check state for the weight block.\n     * @param e - The input change event.\n     */\n    const handleChangeWeightSlider = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const value = +target.value / 100;\n        let checkState = state.weightState.weights[label].checkState;\n        if (checkState !== undefined) {\n            checkState = true;\n        }\n        globalState.setWeight({\n            block: label,\n            value: value,\n            checkState: checkState,\n        });\n    };\n\n    /**\n     * Handles the change event for the weight number input.\n     * Updates the value and check state for the weight block.\n     * @param e - The input change event.\n     */\n    const handleChangeWeightNumber = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const value = +target.value;\n        let checkState = state.weightState.weights[label].checkState;\n        if (checkState !== undefined) {\n            checkState = true;\n        }\n        globalState.setWeight({\n            block: label,\n            value: value,\n            checkState: checkState,\n        });\n    };\n\n    const weightController = values[label];\n\n    /**\n     * Live-sync handler for slider @input (does not commit state yet).\n     * Mirrors the slider value (scaled back to original 0-? range) into the numeric input\n     * so the user sees real-time feedback while dragging before the @change event fires.\n     */\n    const immediateSliderInput = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const raw = +target.value / 100;\n        const wrapper = target.parentElement as HTMLElement;\n        const numberInput = wrapper.querySelector('input.value') as HTMLInputElement | null;\n        if (numberInput) numberInput.value = raw.toString();\n    };\n    /**\n     * Live-sync handler for number @input.\n     * Expands the slider range first when user enters a value outside current min/max\n     * (matching the logic used in setWeight) and then updates the slider thumb position.\n     * State commit is deferred to the @change handler.\n     */\n    const immediateNumberInput = (e: Event) => {\n        const target = e.target as HTMLInputElement;\n        const wrapper = target.parentElement as HTMLElement;\n        const slider = wrapper.querySelector('input.slider') as HTMLInputElement | null;\n        if (!slider) return;\n        const raw = +target.value;\n        if (isNaN(raw)) return; // Unconfirmed / empty input etc.\n        let sliderMin = +slider.min; // Scaled (0-100x) current min\n        let sliderMax = +slider.max;\n        const scaled = Math.round(raw * 100);\n        // Expand range first if the input value is outside (same policy as setWeight)\n        if (scaled < sliderMin) sliderMin = scaled;\n        if (scaled > sliderMax) sliderMax = scaled;\n        if (sliderMin !== +slider.min) slider.min = String(sliderMin);\n        if (sliderMax !== +slider.max) slider.max = String(sliderMax);\n        // Finally assign the value (no clamp needed after expansion)\n        slider.value = String(scaled);\n    };\n    return html`\n        <span>\n            <label>${label}</label>\n            ${state.weightState.weights[label].checkState !== undefined\n                ? html`<input type=\"checkbox\" .checked=${state.weightState.weights[label].checkState} @input=${handleChangeWeightCheck} />`\n                : ''}\n        </span>\n        <div class=\"f f-c g-4\">\n            <input\n                class=\"slider\"\n                type=\"range\"\n                .min=${Math.round(weightController.sliderMin * 100)}\n                .max=${Math.round(weightController.sliderMax * 100)}\n                .step=${Math.round(config.step * 100)}\n                .value=${Math.round(weightController.value * 100)}\n                ?disabled=${disabled(state, label)}\n                @input=${immediateSliderInput}\n                @change=${handleChangeWeightSlider}\n            />\n            <input\n                class=\"value\"\n                type=\"number\"\n                .value=${+weightController.value}\n                .step=${config.step}\n                ?disabled=${disabled(state, label)}\n                @input=${immediateNumberInput}\n                @change=${handleChangeWeightNumber}\n            />\n        </div>\n    `;\n}\n", "import * as historyManager from '@/shared/manager/history-manager';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { getPreset } from '@/shared/utils/common-utils';\nimport { getDisplayStyle, getVisibilityStyle } from '@/shared/utils/helper-utils';\nimport { createLoraParamsState } from '@/shared/utils/state-utils';\n\nimport { TemplateResult, html } from 'lit-html';\n\n// \u30C9\u30E9\u30C3\u30B0\u72B6\u614B\u3092\u7BA1\u7406\u3059\u308B\u30B0\u30ED\u30FC\u30D0\u30EB\u5909\u6570\nlet isDragging = false;\nlet offset = { x: 0, y: 0 };\n\n/**\n * HeaderSection component displays the title bar of the Weight Helper.\n * Provides LoRA name display, lock toggle, and history navigation controls.\n * @param loraName - The name of the LoRA model.\n * @param lock - The current lock status.\n * @returns The HeaderSection template.\n */\nexport function createHeaderSection(loraName: string, lock: boolean): TemplateResult {\n    const state = globalState.getGlobalState();\n    const histories = historyManager.getHistories(state.loraName);\n\n    /**\n     * Handles the mouse down event for dragging the header.\n     * @param e - The mouse event.\n     */\n    const handleMouseDown = (e: MouseEvent) => {\n        isDragging = true;\n        const el = document.getElementById('weight-helper');\n        if (!el) return;\n        const rect = el.getBoundingClientRect();\n        offset = {\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top,\n        };\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n    };\n\n    /**\n     * Handles the mouse move event for dragging the header.\n     * Updates the position of the header based on mouse movement.\n     * @param e - The mouse event.\n     */\n    const handleMouseMove = (e: MouseEvent) => {\n        if (!isDragging) return;\n\n        const x = e.clientX - offset.x + window.scrollX;\n        const y = e.clientY - offset.y + window.scrollY;\n\n        globalState.setPosition(y, x);\n    };\n\n    /**\n     * Handles the mouse up event to stop dragging the header.\n     * Removes the event listeners for mouse move and mouse up.\n     */\n    const handleMouseUp = () => {\n        isDragging = false;\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    /**\n     * Handles the clear history button click event.\n     * Clears the history of the Weight Helper.\n     */\n    const handleClearHistory = () => {\n        globalState.clearHistory();\n    };\n\n    /**\n     * Handles the lock toggle button click event.\n     * Toggles the lock status for the current LoRA and loraParams.\n     */\n    const handleToggleLockStatus = () => {\n        globalState.toggleLockStatus();\n    };\n\n    /**\n     * Handles the previous history button click event.\n     * Navigates to the previous history state.\n     */\n    const handlePrevHistory = () => {\n        const newIndex = Math.max(0, state.historyIndex - 1);\n        const history = histories[newIndex];\n        const loraParams = createLoraParamsState(history.loraParams, history.selectedModelType, history.selectedLoraBlockType);\n        const locked = historyManager.isLocked(state.loraName, history.loraParams);\n        const preset = getPreset(history.selectedModelType, history.selectedLoraBlockType, state.lbwPresets, loraParams.weights);\n        globalState.setHistory({ historyIndex: newIndex, weightState: loraParams, locked: locked, preset: preset });\n    };\n\n    /**\n     * Handles the next history button click event.\n     * Navigates to the next history state.\n     */\n    const handleNextHistory = () => {\n        const newIndex = Math.min(histories.length - 1, state.historyIndex + 1);\n        const history = histories[newIndex];\n        const loraParams = createLoraParamsState(history.loraParams, history.selectedModelType, history.selectedLoraBlockType);\n        const locked = historyManager.isLocked(state.loraName, history.loraParams);\n        const preset = getPreset(history.selectedModelType, history.selectedLoraBlockType, state.lbwPresets, loraParams.weights);\n        globalState.setHistory({ historyIndex: newIndex, weightState: loraParams, locked: locked, preset: preset });\n    };\n\n    return html`\n        <header @mousedown=${handleMouseDown}>\n            <span>\n                <span class=\"lock ${lock ? 'like' : 'unlike'}\" style=\"${getVisibilityStyle(!state.weightState.xyzMode)}\" @click=${handleToggleLockStatus}>\n                    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                        <path\n                            d=\"M21,10H19V7A7,7,0,0,0,5,7v3H3a1,1,0,0,0-1,1v9a4,4,0,0,0,4,4H18a4,4,0,0,0,4-4V11A1,1,0,0,0,21,10Zm-9,9.5A2.5,2.5,0,1,1,14.5,17,2.5,2.5,0,0,1,12,19.5ZM15,10H9V7a3,3,0,0,1,6,0v3Z\"\n                        ></path>\n                    </svg>\n                </span>\n                <label class=\"name\">${loraName}</label>\n            </span>\n            <div class=\"history\" style=\"${getDisplayStyle(histories.length > 1)}\">\n                <a class=\"icon\" @click=${handleClearHistory}>clear</a>\n                <div class=\"page\">\n                    <a class=\"icon\" @click=${handlePrevHistory} style=\"${getVisibilityStyle(state.historyIndex > 0)}\">&lt;</a>\n                    <label class=\"page-label\">${state.historyIndex + 1}/${histories.length}</label>\n                    <a class=\"icon\" @click=${handleNextHistory} style=\"${getVisibilityStyle(state.historyIndex < histories.length - 1)}\">&gt;</a>\n                </div>\n            </div>\n        </header>\n    `;\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { expandRange } from '@/shared/utils/helper-utils';\n\nimport { createWeightController } from '@/components/sections/common-section';\n\nimport { TemplateResult, html } from 'lit-html';\n\n/**\n * LbwSection creates weight controllers for LoRA block weights.\n * Shows groups of blocks based on the current model and block type configuration.\n * @returns The LbwSection template.\n */\nexport function createLbwSection(): TemplateResult {\n    const state = globalState.getGlobalState();\n    const { blockGroups, weightState } = state;\n    const { selectedModelType, selectedLoraBlockType } = weightState;\n\n    const maskedBlockSet = new Set(configManager.getMaskedLbwBlocks(selectedModelType, selectedLoraBlockType));\n\n    return html`\n        <div class=\"lbw-column\">\n            ${blockGroups.map(\n                (cols) => html`\n                    <div class=\"f col g-2\" style=\"display: flex\">\n                        ${cols.map(\n                            (group) => html`\n                                <div class=\"border p f g-2 col\">\n                                    ${expandRange(group).map((blockLabel) =>\n                                        maskedBlockSet.has(blockLabel) && weightState.weights[blockLabel]\n                                            ? html` <div class=\"f g-2\">${createWeightController(blockLabel, weightState.weights)}</div> `\n                                            : '',\n                                    )}\n                                </div>\n                            `,\n                        )}\n                    </div>\n                `,\n            )}\n        </div>\n    `;\n}\n", "import { SELECTABLE_LORA_BLOCK_TYPES, SELECTABLE_MODEL_TYPES } from '@/shared/constants/common-const';\nimport * as configManager from '@/shared/manager/config-manager';\nimport * as currentState from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { LoraBlockTypes, ModelTypes } from '@/shared/types/lora-types';\nimport { disabled } from '@/shared/utils/helper-utils';\nimport { mergeWeightsWithGroups } from '@/shared/utils/weight-utils';\n\nimport { TemplateResult, html } from 'lit-html';\n\n/**\n * LoraSettingsSection creates controls for model settings.\n * Allows selection of model type, LoRA block type, presets, and XYZ mode.\n * @returns The LoraSettingsSection template.\n */\nexport function createLoraSettingsSection(): TemplateResult {\n    const state = globalState.getGlobalState();\n\n    /**\n     * Handles the change event for the LoRA block type select box.\n     * Updates the block groups, presets, and weights for the selected block type.\n     * @param e - The select change event.\n     */\n    const handleChangeLoraBlockType = (e: Event) => {\n        const target = e.target as HTMLSelectElement;\n        const selectedLoraBlockType = target.value as LoraBlockTypes;\n\n        const blockGroups = configManager.getLbwBlockGroups(state.weightState.selectedModelType, selectedLoraBlockType);\n        const lbwPresets = currentState.getLbwPresets(state.weightState.selectedModelType, selectedLoraBlockType);\n        const weights = mergeWeightsWithGroups(state.weightState.weights, blockGroups);\n\n        globalState.setModelInfo({\n            selectedLoraBlockType: selectedLoraBlockType,\n            selectedModelType: state.weightState.selectedModelType,\n            blockGroups: blockGroups,\n            lbwPresets: lbwPresets,\n            weights: weights,\n        });\n    };\n\n    /**\n     * Handles the change event for the model type select box.\n     * Updates the block groups, presets, and weights for the selected model type.\n     * @param e - The select change event.\n     */\n    const handleChangeModelType = (e: Event) => {\n        const target = e.target as HTMLSelectElement;\n        const selectedModelType = target.value as ModelTypes;\n\n        const blockGroups = configManager.getLbwBlockGroups(selectedModelType, state.weightState.selectedLoraBlockType);\n        const lbwPresets = currentState.getLbwPresets(selectedModelType, state.weightState.selectedLoraBlockType);\n        const weights = mergeWeightsWithGroups(state.weightState.weights, blockGroups);\n\n        globalState.setModelInfo({\n            selectedModelType: selectedModelType,\n            selectedLoraBlockType: state.weightState.selectedLoraBlockType,\n            blockGroups: blockGroups,\n            lbwPresets: lbwPresets,\n            weights: weights,\n        });\n    };\n\n    /**\n     * Handles the toggle event for the XYZ mode checkbox.\n     * Dispatches an action to toggle the XYZ mode state.\n     */\n    const handleToggleXyzMode = () => {\n        globalState.toggleXyzMode();\n    };\n\n    /**\n     * Handles the change event for the preset select box.\n     * Applies the selected preset weights to the state.\n     * @param e - The select change event.\n     */\n    const handleApplyPresetWeights = (e: Event) => {\n        const target = e.target as HTMLSelectElement;\n        let preset = target.value as string;\n        if (preset === '') {\n            preset = state.preset;\n            if (preset === '') {\n                return;\n            }\n        }\n        const presetValues = currentState\n            .getLbwPresets(state.weightState.selectedModelType, state.weightState.selectedLoraBlockType)\n            [preset].split(',')\n            .map((v) => +v);\n\n        const weights: Record<string, globalState.WeightControlState> = {};\n        const maskedLbwBlocks = configManager.getMaskedLbwBlocks(state.weightState.selectedModelType, state.weightState.selectedLoraBlockType);\n        maskedLbwBlocks.forEach((block, i) => {\n            weights[block] = {\n                initValue: state.weightState.weights[block].initValue,\n                value: presetValues[i],\n                sliderMin: Math.min(presetValues[i], state.weightState.weights[block].sliderMin),\n                sliderMax: Math.max(presetValues[i], state.weightState.weights[block].sliderMax),\n            };\n        });\n\n        globalState.setPreset({\n            weights: weights,\n            preset: target.value,\n        });\n    };\n\n    return html`\n        <div class=\"f g-2 f-end\">\n            <select .value=\"${state.weightState.selectedModelType}\" style=\"flex-grow: 1\" ?disabled=\"${disabled(state)}\" @change=\"${handleChangeModelType}\">\n                ${Object.entries(SELECTABLE_MODEL_TYPES).map(([name, modelType]) => html` <option value=\"${modelType}\">${name}</option> `)}\n            </select>\n            <select\n                .value=\"${state.weightState.selectedLoraBlockType}\"\n                style=\"flex-grow: 1\"\n                ?disabled=\"${disabled(state)}\"\n                @change=\"${handleChangeLoraBlockType}\"\n            >\n                ${Object.entries(SELECTABLE_LORA_BLOCK_TYPES).map(([name, loraBlockType]) => html` <option value=\"${loraBlockType}\">${name}</option> `)}\n            </select>\n        </div>\n        <div class=\"f g-2 f-end\">\n            <select .value=\"${state.preset}\" style=\"flex-grow: 1\" ?disabled=\"${disabled(state)}\" @change=\"${handleApplyPresetWeights}\">\n                <option value=\"\"></option>\n                ${Object.keys(state.lbwPresets).map((presetName) => html` <option value=\"${presetName}\">${presetName}</option> `)}\n            </select>\n            <div class=\"p f g-2 f-end\">\n                <div class=\"f g-2 f-end\">\n                    <input\n                        id=\"wh:xyz\"\n                        value=\"XYZ\"\n                        type=\"checkbox\"\n                        .checked=\"${state.weightState.xyzMode}\"\n                        ?disabled=\"${disabled(state)}\"\n                        @change=\"${handleToggleXyzMode}\"\n                    />\n                    <label class=\"radio-label\" for=\"wh:xyz\">\n                        ${configManager.getXyzLabel(state.weightState.selectedModelType, state.weightState.selectedLoraBlockType)}\n                    </label>\n                </div>\n            </div>\n        </div>\n    `;\n}\n", "import { resetMetadataAbortController } from '@/shared/manager/api-manager';\nimport * as configManager from '@/shared/manager/config-manager';\nimport * as currentState from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { ModelTypes } from '@/shared/types/lora-types';\nimport { fetchMetadata } from '@/shared/utils/api-utils';\nimport { mergeWeightsWithGroups } from '@/shared/utils/weight-utils';\n\nimport { TemplateResult, html } from 'lit-html';\n\n/**\n * MetadataSection component displays model and base information.\n * Provides a button to fetch and analyze detailed metadata for the current LoRA model.\n * @returns The MetadataSection template.\n */\nexport function createMetadataSection(): TemplateResult {\n    const state = globalState.getGlobalState();\n\n    /**\n     * Handles the click event for the analyze full metadata button.\n     * Initiates fetching and loading of full metadata for the current LoRA model.\n     */\n    const handleAnalyzeFull = () => {\n        if (state.uiState.isWaiting) {\n            return;\n        }\n        const metadataAbortController = resetMetadataAbortController();\n\n        globalState.setWaiting(true);\n\n        fetchMetadata(state.loraName, true, metadataAbortController.signal)\n            .then((result) => {\n                let selectedModelType = state.weightState.selectedModelType;\n                if (!selectedModelType || selectedModelType === ModelTypes.Unknown) {\n                    selectedModelType = result.modelType ?? ModelTypes.Unknown;\n                }\n                const blockGroups = configManager.getLbwBlockGroups(selectedModelType, state.weightState.selectedLoraBlockType);\n                const weights = mergeWeightsWithGroups(state.weightState.weights, blockGroups);\n                globalState.loadMetadata({\n                    algorithm: result.algorithm || 'Unknown',\n                    modelType: result.modelType || 'Unknown',\n                    baseModel: result.baseModel || 'Unknown',\n                    selectedModelType: selectedModelType,\n                    usingBlocks: result.usingBlocks,\n                    blockGroups: blockGroups,\n                    lbwPresets: currentState.getLbwPresets(selectedModelType, state.weightState.selectedLoraBlockType),\n                    weights: weights,\n                });\n            })\n            .catch((error) => {\n                if (error.name !== 'AbortError') {\n                    console.error('Error fetching metadata:', error);\n                    globalState.setWaiting(false);\n                }\n            });\n    };\n\n    return html`\n        <span class=\"metadata\">\n            <span>\n                <span>Model</span>\n                <span>${state.metadataState?.modelType || 'Unknown'}</span>\n            </span>\n            <span>\n                <span>Base</span>\n                <span>${state.metadataState?.baseModel || 'Unknown'}</span>\n            </span>\n            <a class=\"icon mini svg\" @click=${handleAnalyzeFull}>\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 492 492\">\n                    <g>\n                        <path\n                            d=\"M484.08,296.216c-5.1-5.128-11.848-7.936-19.032-7.936H330.516c-14.828,0-26.86,12.036-26.86,26.868v22.796c0,7.168,2.784,14.064,7.884,19.16c5.092,5.088,11.82,8.052,18.976,8.052H366.1c-31.544,30.752-74.928,50.08-120.388,50.08c-71.832,0-136.028-45.596-159.744-113.344c-5.392-15.404-19.972-25.784-36.28-25.784c-4.316,0-8.592,0.708-12.7,2.144c-9.692,3.396-17.48,10.352-21.932,19.596c-4.456,9.248-5.04,19.684-1.648,29.368c34.496,98.54,127.692,164.74,232.144,164.74c64.132,0,123.448-23.948,169.572-67.656v25.22c0,14.836,12.384,27.108,27.224,27.108h22.792c14.84,0,26.86-12.272,26.86-27.108V315.24C492,308.056,489.2,301.304,484.08,296.216z\"\n                        ></path>\n                    </g>\n                    <g>\n                        <path\n                            d=\"M478.628,164.78C444.132,66.244,350.916,0.044,246.464,0.044c-64.136,0-123.464,23.952-169.588,67.66v-25.22c0-14.832-12.344-27.112-27.184-27.112H26.896C12.06,15.372,0,27.652,0,42.484V176.76c0,7.18,2.824,13.868,7.944,18.964c5.096,5.128,11.86,7.932,19.044,7.932l-0.08,0.06h134.604c14.84,0,26.832-12.028,26.832-26.86v-22.8c0-14.836-11.992-27.216-26.832-27.216h-35.576c31.544-30.752,74.932-50.076,120.392-50.076c71.832,0,136.024,45.596,159.74,113.348c5.392,15.404,19.968,25.78,36.28,25.78c4.32,0,8.588-0.704,12.7-2.144c9.696-3.396,17.48-10.348,21.932-19.596C481.432,184.9,482.02,174.472,478.628,164.78z\"\n                        ></path>\n                    </g>\n                </svg>\n            </a>\n        </span>\n    `;\n}\n", "import { getEditor, getTabId } from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { withoutPromptAssist } from '@/shared/utils/common-utils';\nimport { getDisplayStyle, getVisibilityStyle } from '@/shared/utils/helper-utils';\n\nimport { TemplateResult, html } from 'lit-html';\n\ndeclare function extraNetworksRequestMetadata(e: Event, type: string, modelName: string): void;\ndeclare function extraNetworksEditUserMetadata(e: Event, tabId: string, type: string, modelName: string): void;\n\n/**\n * PreviewSection creates information display about the selected model.\n * Shows preview image, metadata actions, trigger word insertion buttons, and model description.\n * @param preview - The preview state containing model information.\n * @returns The PreviewSection template.\n */\nexport function createPreviewSection(preview: globalState.PreviewState): TemplateResult {\n    /**\n     * Handles the click event to show internal metadata for the model.\n     * @param e - The click event.\n     */\n    const handleShowMetadata = (e: Event) => {\n        extraNetworksRequestMetadata(e, 'lora', preview.modelName);\n    };\n\n    /**\n     * Handles the click event to edit user metadata for the model.\n     * @param e - The click event.\n     */\n    const handleEditMetadata = (e: Event) => {\n        extraNetworksEditUserMetadata(e, getTabId(), 'lora', preview.modelName);\n    };\n\n    /**\n     * Handles the click event to open the Civitai model page in a new tab.\n     */\n    const handleOpenCivitai = () => {\n        window.open(`https://civitai.com/models/${preview.modelId}`, '_blank');\n    };\n\n    /**\n     * Handles the click event to show the preview description.\n     */\n    const handleOpenPreviewDescription = () => {\n        globalState.setPreviewDescriptionVisible(true);\n    };\n\n    /**\n     * Handles the click event to close the preview description.\n     */\n    const handleClosePreviewDescription = () => {\n        globalState.setPreviewDescriptionVisible(false);\n    };\n\n    /**\n     * Handles the click event to insert trigger words into the prompt or negative prompt textarea.\n     */\n    const handleInsertTriggerWords = () => {\n        const tabId = getTabId();\n        let promptTextarea = document.querySelector(`#${tabId}_prompt textarea`) as HTMLTextAreaElement;\n        let negativeTextarea = document.querySelector(`#${tabId}_neg_prompt textarea`) as HTMLTextAreaElement | undefined;\n\n        const textarea = getEditor();\n        if (textarea === negativeTextarea) {\n        } else if (textarea !== promptTextarea) {\n            promptTextarea = textarea;\n            negativeTextarea = undefined;\n        }\n        if (!opts.weight_helper_using_execCommand) {\n            const insert = () => {\n                const zipped = [\n                    { triggerWords: preview.triggerWords, textarea: promptTextarea },\n                    { triggerWords: preview.negativeTriggerWords, textarea: negativeTextarea },\n                ];\n                for (const { triggerWords, textarea } of zipped) {\n                    if (triggerWords.length > 0 && textarea) {\n                        let words = triggerWords.join(', ');\n                        if (textarea.value) words = ', ' + words;\n                        textarea.value += words;\n                    }\n                }\n            };\n            insert();\n        } else {\n            const insert = () => {\n                const zipped = [\n                    { triggerWords: preview.triggerWords, textarea: promptTextarea },\n                    { triggerWords: preview.negativeTriggerWords, textarea: negativeTextarea },\n                ];\n                for (const { triggerWords, textarea } of zipped) {\n                    if (triggerWords.length > 0 && textarea) {\n                        let words = triggerWords.join(', ');\n                        if (textarea.value) words = ', ' + words;\n                        textarea.focus();\n                        const eolIndex = textarea.value.length;\n                        textarea.setSelectionRange(eolIndex, eolIndex);\n                        document.execCommand('insertText', false, words);\n                    }\n                }\n            };\n            withoutPromptAssist(() => {\n                insert();\n            });\n        }\n        globalState.hideTagInsertButton();\n    };\n\n    const classNames = ['preview-pane', 'card'];\n\n    // position based on settings\n    switch (opts.weight_helper_preview_position) {\n        case 'Bottom Right':\n            classNames.push('preview-bottom-right');\n            break;\n        case 'Top Left':\n            classNames.push('preview-top-left');\n            break;\n        case 'Bottom Left':\n            classNames.push('preview-bottom-left');\n            break;\n        default:\n            classNames.push('preview-top-right');\n            break;\n    }\n\n    return html`\n        <div class=\"${classNames.join(' ')}\" data-name=\"${preview.modelName}\">\n            <img class=\"preview\" src=\"${preview.thumbUrl}\" style=\"height: ${opts.weight_helper_preview_height}px\" />\n            <div class=\"action-row button-top\" style=\"${getVisibilityStyle(!preview.isDescriptionVisible)}\">\n                ${preview.modelName && preview.hasMetadata && typeof extraNetworksRequestMetadata === 'function'\n                    ? html` <div class=\"metadata-btn card-btn\" title=\"Show internal metadata\" @click=\"${handleShowMetadata}\"></div> `\n                    : ''}\n                ${preview.modelName && typeof extraNetworksEditUserMetadata === 'function'\n                    ? html` <div class=\"edit-btn card-btn\" title=\"Edit metadata\" @click=\"${handleEditMetadata}\"></div> `\n                    : ''}\n                ${preview.modelId ? html` <div class=\"civitai-btn card-btn\" title=\"Open civitai\" @click=\"${handleOpenCivitai}\"></div> ` : ''}\n                ${preview.triggerWords.length > 0 || preview.negativeTriggerWords.length > 0\n                    ? html`\n                          <div\n                              class=\"add-trigger-btn card-btn\"\n                              title=\"Add trigger words\"\n                              @click=\"${handleInsertTriggerWords}\"\n                              style=\"${getDisplayStyle(preview.isTagInsertButtonVisible)}\"\n                          ></div>\n                      `\n                    : ''}\n            </div>\n\n            ${preview.description\n                ? html`\n                      <div class=\"action-row button-bottom\" style=\"${getVisibilityStyle(!preview.isDescriptionVisible)}\">\n                          <div class=\"card-btn note-btn\" @click=\"${handleOpenPreviewDescription}\"></div>\n                      </div>\n                      <textarea class=\"description\" style=\"${getVisibilityStyle(preview.isDescriptionVisible)}\">\n                    ${preview.description}\n                </textarea\n                      >\n                      <div\n                          class=\"card-btn description-close-btn\"\n                          style=\"${getVisibilityStyle(preview.isDescriptionVisible)}\"\n                          @click=\"${handleClosePreviewDescription}\"\n                      ></div>\n                  `\n                : ''}\n        </div>\n    `;\n}\n", "import { CARD_NO_IMAGE_PATH } from '@/shared/constants/common-const';\nimport { resetMetadataAbortController, resetPreviewAbortController } from '@/shared/manager/api-manager';\nimport * as cacheManager from '@/shared/manager/cache-manager';\nimport * as configManager from '@/shared/manager/config-manager';\nimport * as historyManager from '@/shared/manager/history-manager';\nimport * as currentState from '@/shared/state/current-state';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { ModelTypes, WeightControllerTypes } from '@/shared/types/lora-types';\nimport { fetchMetadata, fetchPreviewData } from '@/shared/utils/api-utils';\nimport { getLoraDefineFromEditor, getOutputStrings, syncEditorWithState } from '@/shared/utils/editor-utils';\nimport { disabled, getDisplayStyle } from '@/shared/utils/helper-utils';\nimport { createWeightHelperInitState, createWeightHelperState } from '@/shared/utils/state-utils';\nimport { mergeWeightsWithGroups } from '@/shared/utils/weight-utils';\n\nimport { createWeightController } from '@/components/sections/common-section';\nimport { createHeaderSection } from '@/components/sections/header-section';\nimport { createLbwSection } from '@/components/sections/lbw-section';\nimport { createLoraSettingsSection } from '@/components/sections/lora-settings-section';\nimport { createMetadataSection } from '@/components/sections/metadata-section';\nimport { createPreviewSection } from '@/components/sections/preview-section';\n\nimport { TemplateResult, html, render } from 'lit-html';\n\ndeclare function gradioApp(): HTMLElement;\n\n// Track if global (one-time) event listeners were attached\nlet isEventListenersInitialized = false;\n\n/**\n * Build main Weight Helper UI template.\n * Note: top/left positioning styles are applied imperatively (drag) and excluded from state to avoid re-renders.\n * @returns The main Weight Helper UI template\n */\nexport function createUITemplate(): TemplateResult {\n    const state = globalState.getGlobalState();\n    const { uiState, weightState, lock } = state;\n\n    // Attach global listeners only once\n    if (!isEventListenersInitialized) {\n        setupEventListeners();\n        isEventListenersInitialized = true;\n    }\n\n    // top/left not included here (managed outside state for performance)\n    const containerStyle = `transform: scale(${uiState.scale}); ${getDisplayStyle(uiState.isVisible)}`;\n\n    return html`\n        <div id=\"weight-helper\" class=\"${state.uiState.isWaiting ? 'waiting' : ''}\" style=\"${containerStyle}\">\n            ${createHeaderSection(state.loraName, lock)} ${createMetadataSection()}\n            ${weightState.weights[WeightControllerTypes.TENC] &&\n            html`<section class=\"border p\">${createWeightController(WeightControllerTypes.TENC, weightState.weights)}</section>`}\n            ${[WeightControllerTypes.UNET, WeightControllerTypes.START, WeightControllerTypes.STOP]\n                .filter((wt) => !!weightState.weights[wt])\n                .map(\n                    (weightType) =>\n                        html`<section\n                            class=\"border p\"\n                            style=\"${getDisplayStyle(\n                                !uiState.isMoreButtonVisible ||\n                                    weightState.weights[weightType].initCheckState ||\n                                    weightState.weights[weightType].initValue !== configManager.getWeightControllerConfig(weightType).default,\n                            )}\"\n                        >\n                            ${createWeightController(weightType, weightState.weights)}\n                        </section>`,\n                )}\n\n            <button style=\"${uiState.isMoreButtonVisible ? '' : 'display: none'}\" ?disabled=\"${disabled(state)}\" @click=\"${() => globalState.hideMoreButton()}\">\n                show more options\n            </button>\n\n            <section class=\"border p\">\n                <label>LBW</label>\n                <div class=\"f col g-4 w-fill\">${createLoraSettingsSection()} ${createLbwSection()}</div>\n            </section>\n\n            ${state.previewState.modelName ? createPreviewSection(state.previewState) : ''}\n        </div>\n    `;\n}\n\n/**\n * Register global event listeners (context menu open/close lifecycle, outside click, ESC key, generate button etc.).\n */\nfunction setupEventListeners(): void {\n    const handleClickGenButton = () => {\n        const state = globalState.getGlobalState();\n        if (state.uiState.isVisible) {\n            closeWeightHelperContext();\n            syncEditorWithState(state);\n        }\n    };\n\n    const handleRightClickTextarea = (e: MouseEvent) => {\n        const state = globalState.getGlobalState();\n        if (state.uiState.isVisible) {\n            e.preventDefault();\n            closeWeightHelperContext();\n            syncEditorWithState(state);\n            return;\n        }\n        const loraDefine = getLoraDefineFromEditor(e);\n        if (loraDefine) {\n            e.preventDefault();\n            openWeightHelperContext(loraDefine);\n        }\n    };\n\n    const handleClickAnyware = (e: MouseEvent) => {\n        const state = globalState.getGlobalState();\n        if (state.uiState.isVisible) {\n            const contextMenuElement = document.getElementById('weight-helper');\n            if (!contextMenuElement) return;\n            const tabId = currentState.getTabId();\n            if (e) {\n                const target = e.target as HTMLBodyElement;\n                if (contextMenuElement.contains(target)) return;\n                if (target.id === `${tabId}_token_button`) return;\n                if (target.id === `${tabId}_lora_edit_user_metadata_button`) return;\n                if (target.className === 'global-popup-close') return;\n                if (target.id.indexOf('_interrupt') > 0) {\n                    closeWeightHelperContext();\n                    return;\n                }\n            }\n            closeWeightHelperContext();\n            syncEditorWithState(state);\n        }\n    };\n\n    const handleKeyupAnyware = (e: KeyboardEvent) => {\n        if ((e as KeyboardEvent).key === 'Escape') {\n            const state = globalState.getGlobalState();\n            cancelWeightHelperContext(state);\n        }\n    };\n\n    // Attach listeners to generate buttons & prompt textareas\n    const genButtons = gradioApp().querySelectorAll(\"button:is([id*='_generate'])\");\n    genButtons.forEach((genBtn) => {\n        genBtn.addEventListener('click', handleClickGenButton, true);\n    });\n\n    const textareas = gradioApp().querySelectorAll(\"*:is([id*='_toprow'] [id*='_prompt'], .prompt) textarea\") as NodeListOf<HTMLTextAreaElement>;\n    textareas.forEach((textarea) => {\n        textarea.addEventListener('contextmenu', handleRightClickTextarea);\n    });\n\n    document.addEventListener('click', handleClickAnyware);\n    document.addEventListener('keyup', handleKeyupAnyware);\n}\n\n// One-time flag for state watching \u2192 subscribe only once\nlet isStateWatchingInitialized = false;\n\n/**\n * Render (and set up subscriptions) of the UI into container.\n * Full state changes trigger template re-render; position changes only mutate style.\n * @param container Target DOM element\n */\nexport function renderUI(container: HTMLElement): void {\n    // \u521D\u671F\u30EC\u30F3\u30C0\u30EA\u30F3\u30B0\n    render(createUITemplate(), container);\n\n    // \u72B6\u614B\u5909\u5316\u3092\u76E3\u8996\u3057\u3066\u81EA\u52D5\u518D\u30EC\u30F3\u30C0\u30EA\u30F3\u30B0\uFF08\u4E00\u5EA6\u3060\u3051\u8A2D\u5B9A\uFF09\n    if (!isStateWatchingInitialized) {\n        // Subscribe to full state updates\n        globalState.subscribeToStateChanges(() => {\n            render(createUITemplate(), container);\n        });\n\n        // Subscribe to position-only updates (avoid re-render)\n        globalState.subscribeToPositionChanges((pos) => {\n            const el = container.querySelector('#weight-helper') as HTMLDivElement;\n            if (!el) return;\n            el.style.top = pos.top + 'px';\n            el.style.left = pos.left + 'px';\n        });\n\n        isStateWatchingInitialized = true;\n    }\n}\n\n/**\n * Open Weight Helper context at given coordinates and load metadata / preview lazily.\n */\nfunction openWeightHelperContext(loraDefine: {\n    tabId: string;\n    textarea: HTMLTextAreaElement;\n    selectionStart: number;\n    selectionEnd: number;\n    namespace: string;\n    loraName: string;\n    loraParams: string;\n    top: number;\n    left: number;\n}) {\n    const { tabId, textarea, selectionStart, selectionEnd, namespace, loraName, loraParams, top, left } = loraDefine;\n\n    currentState.setTabId(tabId);\n    currentState.setEditor(textarea);\n    currentState.setSelectionStart(selectionStart);\n    currentState.setSelectionEnd(selectionEnd);\n    currentState.setLoraDefineString(textarea.value.substring(selectionStart, selectionEnd));\n\n    currentState.loadStep(tabId);\n    currentState.loadLbwPresets(tabId);\n\n    configManager.getWeightControllerConfig(WeightControllerTypes.START).max = currentState.getStep();\n    configManager.getWeightControllerConfig(WeightControllerTypes.STOP).max = currentState.getStep();\n    configManager.getWeightControllerConfig(WeightControllerTypes.STOP).default = currentState.getStep();\n\n    const rect = document.getElementById('weight-helper')!.getBoundingClientRect();\n    const diffBottom = window.innerHeight - rect.bottom;\n    let arrangedTop = top;\n    if (diffBottom < 0) {\n        if (rect.top < 0) {\n            arrangedTop = window.scrollY;\n        } else {\n            arrangedTop += diffBottom;\n        }\n    }\n    const props = createWeightHelperState(namespace, loraName, loraParams);\n\n    globalState.openContext(props);\n    // Apply position directly (not part of state)\n    const container = document.getElementById('weight-helper');\n    if (container) {\n        container.style.top = arrangedTop + 'px';\n        container.style.left = left + 'px';\n    }\n\n    if (!props.metadataState) {\n        const metadataAbortController = resetMetadataAbortController();\n        fetchMetadata(loraName, false, metadataAbortController.signal)\n            .then((result) => {\n                let selectedModelType = props.weightState.selectedModelType;\n                if (!selectedModelType || selectedModelType === ModelTypes.Unknown) {\n                    selectedModelType = result.modelType ?? ModelTypes.Unknown;\n                }\n                const selectedLoraBlockType = props.weightState.selectedLoraBlockType;\n                const blockGroups = configManager.getLbwBlockGroups(selectedModelType, selectedLoraBlockType);\n                const weights = mergeWeightsWithGroups(props.weightState.weights, blockGroups);\n\n                const weightState = {\n                    ...props.weightState,\n                    selectedModelType: selectedModelType,\n                    selectedLoraBlockType: selectedLoraBlockType,\n                };\n                const loraParams = getOutputStrings(props.loraName, weightState).loraParams;\n                if (!props.weightState.xyzMode) {\n                    historyManager.addHistory(loraName, {\n                        loraParams: loraParams,\n                        selectedLoraBlockType: selectedLoraBlockType,\n                        selectedModelType: selectedModelType,\n                    });\n                    globalState.setHistoryIndex(historyManager.getHistories(loraName).length - 1);\n                }\n\n                globalState.loadMetadata({\n                    algorithm: result.algorithm || 'Unknown',\n                    modelType: result.modelType || 'Unknown',\n                    baseModel: result.baseModel || 'Unknown',\n                    selectedModelType: selectedModelType,\n                    usingBlocks: result.usingBlocks,\n                    blockGroups: blockGroups,\n                    lbwPresets: currentState.getLbwPresets(selectedModelType, props.weightState.selectedLoraBlockType),\n                    weights: weights,\n                });\n            })\n            .catch((error) => {\n                if (error.name !== 'AbortError') {\n                    console.error('Error fetching metadata:', error);\n                    globalState.setWaiting(false);\n                }\n            });\n    }\n\n    if (!props.previewState.modelId) {\n        const previewAbortController = resetPreviewAbortController();\n        fetchPreviewData(loraName, previewAbortController.signal)\n            .then(async (result) => {\n                if (result.thumbUrl !== CARD_NO_IMAGE_PATH) {\n                    result.thumbUrl = result.thumbUrl;\n                }\n                cacheManager.setPreviewCache(loraName, result);\n                globalState.loadPreviewData(result);\n            })\n            .catch((error) => {\n                if (error.name !== 'AbortError') {\n                    console.error('Error fetching metadata:', error);\n                }\n            });\n    }\n}\n\n/** Close context menu and reset to initial hidden state. */\nfunction closeWeightHelperContext(): void {\n    const weightHelperState = createWeightHelperInitState();\n    globalState.closeContext(weightHelperState);\n}\n\n/** Cancel editing: revert editor text (if enabled) then close. */\nfunction cancelWeightHelperContext(state: globalState.BasicState): void {\n    if (!opts.weight_helper_using_execCommand) {\n        syncEditorWithState(state, true);\n    }\n    closeWeightHelperContext();\n}\n", "import * as configManager from '@/shared/manager/config-manager';\nimport * as historyManager from '@/shared/manager/history-manager';\nimport * as globalState from '@/shared/state/global-weight-helper-state';\nimport { createWeightHelperInitState } from '@/shared/utils/state-utils';\n\nimport { renderUI } from '@/components/ui-template';\n\ndeclare function gradioApp(): HTMLElement;\ndeclare function onUiLoaded(callback: VoidFunction): void;\ndeclare function onOptionsChanged(callback: VoidFunction): void;\n\n/**\n * Promise resolver for the initialization process.\n * Used to signal when options have been loaded and initialization can proceed.\n */\nexport let resolveInitialized: ((value: boolean) => void) | null;\n\n/**\n * Promise that resolves when the Weight Helper is ready to initialize.\n * Used to defer initialization until options are loaded.\n */\nconst initializedPromise = new Promise<boolean>((resolve) => {\n    resolveInitialized = resolve;\n});\n\n/**\n * Entry point for the Weight Helper React application.\n * Handles initialization, theme adaptation, and state setup when the UI is loaded or options are changed.\n */\nhistoryManager.loadLocalStorage();\n\nonUiLoaded(() => {\n    if (!gradioApp().querySelector('#lbw_ratiospreset')) {\n        return;\n    }\n    const textColor = getComputedStyle(document.documentElement).getPropertyValue('--body-text-color').trim();\n    const textColorRgb = textColor\n        .slice(1)\n        .match(/.{1,2}/g)!\n        .map((hex) => parseInt(hex, 16));\n    const textColorRgba = [...textColorRgb, 0.3];\n    document.documentElement.style.setProperty('--weight-helper-shadow', `rgba(${textColorRgba.join(',')})`);\n    document.documentElement.style.setProperty('--weight-helper-slider_size', String(opts.weight_helper_slider_length));\n\n    initializedPromise.then(() => {\n        const weightHelperContainer = document.createElement('div');\n        weightHelperContainer.id = 'weight-helper-container';\n        gradioApp().appendChild(weightHelperContainer);\n\n        configManager.initialize();\n        globalState.initializeGlobalState(createWeightHelperInitState());\n        renderUI(weightHelperContainer);\n    });\n});\n\nonOptionsChanged(() => {\n    if (resolveInitialized) {\n        resolveInitialized(true);\n        resolveInitialized = null;\n    }\n});\n"],
  "mappings": "mBAMO,IAAMA,EAAiB,CAC1B,KAAM,OACN,QAAS,UACT,QAAS,SACb,EAGaC,EAAa,CACtB,GAAI,KACJ,KAAM,OACN,KAAM,OACN,QAAS,SACb,EAGaC,EAAmB,CAC5B,GAAI,KACJ,KAAM,OACN,MAAO,QACP,KAAM,OACN,KAAM,OACN,IAAK,MACL,KAAM,MACV,EAGaC,EAAwB,CACjC,KAAM,OACN,KAAM,OACN,MAAO,QACP,KAAM,OACN,IAAK,KACT,ECpCA,IAAMC,GAAkB,CACpB,iBAAkB,CACd,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,OACJ,EACA,kBAAmB,CACf,OACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACJ,CACJ,EAEaC,GAAa,CACtB,CAACC,EAAW,EAAE,EAAGF,GAAgB,iBACjC,CAACE,EAAW,IAAI,EAAGF,GAAgB,iBACnC,CAACE,EAAW,IAAI,EAAGF,GAAgB,kBACnC,CAACE,EAAW,OAAO,EAAG,CAAC,CAC3B,EAEaC,GAAgB,CACzB,CAACD,EAAW,EAAE,EAAG,CACb,CAACE,EAAe,IAAI,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACpG,CAACA,EAAe,OAAO,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG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",
  "names": ["LoraBlockTypes", "ModelTypes", "LoraDefineParams", "WeightControllerTypes", "BASE_MODEL_TYPE", "LBW_BLOCKS", "ModelTypes", "lbwMaskDefine", "LoraBlockTypes", "XYZ_PRESETS", "SELECTABLE_MODEL_TYPES", "SELECTABLE_LORA_BLOCK_TYPES", "CARD_NO_IMAGE_PATH", "WeightControllerConfig", "WeightControllerTypes", "lbwGroupConfig", "ModelTypes", "LoraBlockTypes", "initialize", "optBlockPattern", "modelType", "SELECTABLE_MODEL_TYPES", "loraBlockType", "SELECTABLE_LORA_BLOCK_TYPES", "optBlockPoints", "blockPoints", "v", "match", "e", "k", "getWeightControllerConfig", "type", "getLbwBlocks", "selectedModelType", "LBW_BLOCKS", "getMaskedLbwBlocks", "selectedLoraBlockType", "masks", "getLbwMasks", "_", "i", "lbwMaskDefine", "getLbwBlockGroups", "getXyzLabel", "XYZ_PRESETS", "_historiesStore", "_lockStore", "getHistories", "loraName", "addHistory", "history", "h", "clearHistories", "lockSet", "addLock", "loraParams", "removeLock", "isLocked", "storeLocalStorage", "lockObj", "key", "loadLocalStorage", "histories", "locks", "getPreset", "selectedModelType", "selectedLoraBlockType", "lbwPresets", "weights", "maskedBlockSet", "getMaskedLbwBlocks", "weightValue", "key", "entries", "foundPreset", "value", "withoutPromptAssist", "func", "tacActiveInOrg", "tacEnabled", "pilotOrg", "pilotEnabled", "_metadataCacheStore", "_previewCacheStore", "getMetadataCache", "loraName", "setMetadataCache", "cache", "getPreviewCache", "setPreviewCache", "_tabId", "_editor", "_selectionStart", "_selectionEnd", "_loraDefineString", "_lbwPresetsMap", "_step", "getTabId", "setTabId", "tabId", "getEditor", "setEditor", "getSelectionStart", "setSelectionStart", "selectionStart", "getSelectionEnd", "setSelectionEnd", "selectionEnd", "getLoraDefineString", "setLoraDefineString", "loraDefineString", "getStep", "loadStep", "getLbwPresets", "selectedModelType", "selectedLoraBlockType", "ModelTypes", "LoraBlockTypes", "loadLbwPresets", "lbwPresets", "e", "lbwPresetsMap", "modelType", "loraBlockType", "lbwPreset", "lbwPresetValueKey", "blockLength", "getLbwMasks", "b", "line", "kv", "lower", "str", "getDisplayStyle", "visible", "getVisibilityStyle", "disabled", "state", "blockLabel", "WeightControllerTypes", "expandRange", "patterns", "result", "b", "pattern", "match", "prefix", "start", "end", "startNum", "endNum", "i", "REGEX", "getLoraDefineFromEditor", "textarea", "selectedText", "prompt", "tmpSelectionStart", "lCar", "rCar", "match", "namespace", "loraName", "loraParams", "tabId", "selectionStart", "selectionEnd", "updateEditor", "updatedText", "getEditor", "start", "getSelectionStart", "end", "getSelectionEnd", "setSelectionEnd", "updateEditorWithExecCommand", "withoutPromptAssist", "getOutputStrings", "weightState", "WeightControllerTypes", "refIdx", "idx", "keyType", "weight", "defVal", "getWeightControllerConfig", "val", "lower", "startDefVal", "startVal", "stopDefVal", "stopVal", "selectedModelType", "selectedLoraBlockType", "xyzValue", "updatedTextWithPreset", "ModelTypes", "lbwWeights", "getLbwMasks", "mask", "i", "getLbwBlocks", "block", "lbwDefault", "lbwValues", "lbwPresets", "getLbwPresets", "preset", "value", "syncEditorWithState", "state", "cancel", "outputStrings", "getLoraDefineString", "setMetadataCache", "addHistory", "storeLocalStorage", "globalState", "stateChangeCallbacks", "positionChangeCallbacks", "notifyStateChange", "callback", "notifyPositionChange", "pos", "subscribeToStateChanges", "index", "subscribeToPositionChanges", "getGlobalState", "initializeGlobalState", "initialState", "openContext", "payload", "closeContext", "setPosition", "top", "left", "loadMetadata", "newState", "setWaiting", "isWaiting", "setModelInfo", "updateEditor", "getOutputStrings", "toggleXyzMode", "setPreset", "weightState", "outputStrings", "locked", "isLocked", "toggleLockStatus", "outputLoraParams", "removeLock", "addLock", "setHistory", "historyIndex", "preset", "selectedLoraBlockType", "selectedModelType", "weights", "lbwe", "xyzMode", "setHistoryIndex", "setWeight", "getPreset", "hideMoreButton", "clearHistory", "clearHistories", "addHistory", "getHistories", "loadPreviewData", "setPreviewDescriptionVisible", "isVisible", "hideTagInsertButton", "createWeightHelperInitState", "LoraBlockTypes", "ModelTypes", "createWeightHelperState", "namespace", "loraName", "loraParams", "selectedModelType", "selectedLoraBlockType", "histories", "getHistories", "latest", "metadataState", "usingBlocks", "metadataCache", "getMetadataCache", "weightState", "createWeightState", "lbwPresets", "getLbwPresets", "outputLoraParams", "getOutputStrings", "isMoreButtonVisible", "keyType", "WeightControllerTypes", "weight", "defVal", "getWeightControllerConfig", "val", "getLbwBlockGroups", "createPreviewState", "getPreset", "isLocked", "modelType", "loraBlockType", "loraParamsProps", "createLoraParamsState", "weights", "lbwe", "xyzMode", "loraParamss", "loraParamsMap", "i", "key", "value", "keyValue", "LoraDefineParams", "loraSdCombination", "SELECTABLE_MODEL_TYPES", "SELECTABLE_LORA_BLOCK_TYPES", "getLbwMasks", "te", "unet", "vStart", "vStop", "lbwVals", "xyzModeFlag", "loraParamKey", "blocks", "loraSd", "b", "refIdx", "enable", "startStop", "useUnet", "lbws", "getLbwBlocks", "lbw", "previewCache", "getPreviewCache", "CARD_NO_IMAGE_PATH", "metadataAbortController", "previewAbortController", "resetMetadataAbortController", "metadataAbortController", "resetPreviewAbortController", "previewAbortController", "fetchMetadata", "loraName", "force", "signal", "res", "fetchPreviewData", "mergeWeightsWithGroups", "currentWeights", "groups", "updatedWeights", "allBlocks", "cols", "group", "expandRange", "block", "getWeightControllerConfig", "WeightControllerTypes", "global", "globalThis", "trustedTypes", "policy", "createPolicy", "createHTML", "s", "boundAttributeSuffix", "marker", "Math", "random", "toFixed", "slice", "markerMatch", "nodeMarker", "d", "document", "createMarker", "createComment", "isPrimitive", "value", "isArray", "Array", "isIterable", "Symbol", "iterator", "SPACE_CHAR", "textEndRegex", "commentEndRegex", "comment2EndRegex", "tagEndRegex", "RegExp", "singleQuoteAttrEndRegex", "doubleQuoteAttrEndRegex", "rawTextElement", "tag", "type", "strings", "values", "_$litType$", "html", "svg", "mathml", "noChange", "for", "nothing", "templateCache", "WeakMap", "walker", "createTreeWalker", "trustFromTemplateString", "tsa", "stringFromTSA", "hasOwnProperty", "Error", "getTemplateHtml", "l", "length", "attrNames", "rawTextEndRegex", "regex", "i", "attrName", "match", "attrNameEndIndex", "lastIndex", "exec", "test", "end", "startsWith", "push", "Template", "constructor", "options", "node", "this", "parts", "nodeIndex", "attrNameIndex", "partCount", "el", "createElement", "currentNode", "content", "wrapper", "firstChild", "replaceWith", "childNodes", "nextNode", "nodeType", "hasAttributes", "name", "getAttributeNames", "endsWith", "realName", "statics", "getAttribute", "split", "m", "index", "ctor", "PropertyPart", "BooleanAttributePart", "EventPart", "AttributePart", "removeAttribute", "tagName", "textContent", "emptyScript", "append", "data", "indexOf", "_options", "innerHTML", "resolveDirective", "part", "parent", "attributeIndex", "currentDirective", "__directives", "__directive", "nextDirectiveConstructor", "_$initialize", "_$resolve", "TemplateInstance", "template", "_$parts", "_$disconnectableChildren", "_$template", "_$parent", "parentNode", "_$isConnected", "fragment", "creationScope", "importNode", "partIndex", "templatePart", "ChildPart", "nextSibling", "ElementPart", "_$setValue", "__isConnected", "startNode", "endNode", "_$committedValue", "_$startNode", "_$endNode", "isConnected", "directiveParent", "_$clear", "_commitText", "_commitTemplateResult", "_commitNode", "_commitIterable", "insertBefore", "_insert", "createTextNode", "result", "_$getTemplate", "h", "_update", "instance", "_clone", "get", "set", "itemParts", "itemPart", "item", "start", "from", "_$notifyConnectionChanged", "n", "remove", "element", "fill", "String", "valueIndex", "noCommit", "change", "v", "_commitValue", "setAttribute", "toggleAttribute", "super", "newListener", "oldListener", "shouldRemoveListener", "capture", "once", "passive", "shouldAddListener", "removeEventListener", "addEventListener", "event", "call", "host", "handleEvent", "polyfillSupport", "global", "litHtmlPolyfillSupport", "Template", "ChildPart", "litHtmlVersions", "push", "render", "value", "container", "options", "partOwnerNode", "renderBefore", "part", "endNode", "insertBefore", "createMarker", "_$setValue", "createWeightController", "label", "values", "state", "getGlobalState", "config", "getWeightControllerConfig", "WeightControllerTypes", "handleChangeWeightCheck", "e", "target", "setWeight", "handleChangeWeightSlider", "value", "checkState", "handleChangeWeightNumber", "weightController", "immediateSliderInput", "raw", "numberInput", "immediateNumberInput", "slider", "sliderMin", "sliderMax", "scaled", "x", "disabled", "isDragging", "offset", "createHeaderSection", "loraName", "lock", "state", "getGlobalState", "histories", "getHistories", "handleMouseDown", "e", "el", "rect", "handleMouseMove", "handleMouseUp", "x", "y", "setPosition", "handleClearHistory", "clearHistory", "handleToggleLockStatus", "toggleLockStatus", "handlePrevHistory", "newIndex", "history", "loraParams", "createLoraParamsState", "locked", "isLocked", "preset", "getPreset", "setHistory", "handleNextHistory", "getVisibilityStyle", "getDisplayStyle", "createLbwSection", "state", "getGlobalState", "blockGroups", "weightState", "selectedModelType", "selectedLoraBlockType", "maskedBlockSet", "getMaskedLbwBlocks", "x", "cols", "group", "expandRange", "blockLabel", "createWeightController", "createLoraSettingsSection", "state", "getGlobalState", "handleChangeLoraBlockType", "e", "selectedLoraBlockType", "blockGroups", "getLbwBlockGroups", "lbwPresets", "getLbwPresets", "weights", "mergeWeightsWithGroups", "setModelInfo", "handleChangeModelType", "selectedModelType", "handleToggleXyzMode", "toggleXyzMode", "handleApplyPresetWeights", "target", "preset", "presetValues", "v", "getMaskedLbwBlocks", "block", "i", "setPreset", "x", "disabled", "SELECTABLE_MODEL_TYPES", "name", "modelType", "SELECTABLE_LORA_BLOCK_TYPES", "loraBlockType", "presetName", "getXyzLabel", "createMetadataSection", "state", "getGlobalState", "handleAnalyzeFull", "metadataAbortController", "resetMetadataAbortController", "setWaiting", "fetchMetadata", "result", "selectedModelType", "ModelTypes", "blockGroups", "getLbwBlockGroups", "weights", "mergeWeightsWithGroups", "loadMetadata", "getLbwPresets", "error", "x", "createPreviewSection", "preview", "handleShowMetadata", "e", "handleEditMetadata", "getTabId", "handleOpenCivitai", "handleOpenPreviewDescription", "setPreviewDescriptionVisible", "handleClosePreviewDescription", "handleInsertTriggerWords", "tabId", "promptTextarea", "negativeTextarea", "textarea", "getEditor", "zipped", "triggerWords", "words", "insert", "eolIndex", "withoutPromptAssist", "hideTagInsertButton", "classNames", "x", "getVisibilityStyle", "getDisplayStyle", "isEventListenersInitialized", "createUITemplate", "state", "getGlobalState", "uiState", "weightState", "lock", "setupEventListeners", "containerStyle", "getDisplayStyle", "x", "createHeaderSection", "createMetadataSection", "WeightControllerTypes", "createWeightController", "wt", "weightType", "getWeightControllerConfig", "disabled", "hideMoreButton", "createLoraSettingsSection", "createLbwSection", "createPreviewSection", "handleClickGenButton", "closeWeightHelperContext", "syncEditorWithState", "handleRightClickTextarea", "e", "loraDefine", "getLoraDefineFromEditor", "openWeightHelperContext", "handleClickAnyware", "contextMenuElement", "tabId", "getTabId", "target", "handleKeyupAnyware", "cancelWeightHelperContext", "genBtn", "textarea", "isStateWatchingInitialized", "renderUI", "container", "B", "subscribeToStateChanges", "subscribeToPositionChanges", "pos", "el", "selectionStart", "selectionEnd", "namespace", "loraName", "loraParams", "top", "left", "setTabId", "setEditor", "setSelectionStart", "setSelectionEnd", "setLoraDefineString", "loadStep", "loadLbwPresets", "getStep", "rect", "diffBottom", "arrangedTop", "props", "createWeightHelperState", "openContext", "metadataAbortController", "resetMetadataAbortController", "fetchMetadata", "result", "selectedModelType", "ModelTypes", "selectedLoraBlockType", "blockGroups", "getLbwBlockGroups", "weights", "mergeWeightsWithGroups", "getOutputStrings", "addHistory", "setHistoryIndex", "getHistories", "loadMetadata", "getLbwPresets", "error", "setWaiting", "previewAbortController", "resetPreviewAbortController", "fetchPreviewData", "CARD_NO_IMAGE_PATH", "setPreviewCache", "loadPreviewData", "weightHelperState", "createWeightHelperInitState", "closeContext", "resolveInitialized", "initializedPromise", "resolve", "loadLocalStorage", "textColorRgba", "hex", "weightHelperContainer", "initialize", "initializeGlobalState", "createWeightHelperInitState", "renderUI"]
}
